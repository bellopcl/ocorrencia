@model NWORKFLOW_WEB.MVC_4_BS.Models.CadLancRegistroOcorrenciaViewModel
@{
    ViewBag.Title = "Cadastro de Ocorrência";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts{
    @Scripts.Render("~/bundles/maskMoney")
    <script type="text/javascript">
        var tipAtend = "";
        valorFreteGlobal = 0.00;
        $('#liFase2').click(function () {
            $("#NumNotaSugTextBox").rules("add", { required: false });
            var classe = document.getElementById('liFase1').className;
            if (classe == "active") {
                if (ValidaCamposObrigatorios()) {
                    var codigoCliente = $('#CodClienteTextBox').val();
                    var codigoMotorista = $('#CodMotoristaTextBox').val();
                    var codPlaca = $('#CodPlacaTextBox').val();
                    var tipAtend = $("#TipoAtendimentoDropDownList :selected").val();
                    PesquisarNotasFiscaisSaida(codigoCliente, codigoMotorista, codPlaca, tipAtend);
                    DesabilitaFase1();
                    HabilitaFase2();
                    setTimeout(function () {
                        var tamanho = $('#TableNotasFiscaisSaida').DataTable().rows().data().length;
                        if (tamanho == 0) {
                            DesabilitaFase2();
                            HabilitaFase1();
                            HabilitaFase2();
                        }
                    }, 1000);
                }
            }
        });
        function DesabilitaFase1() {
            $("#HrefFase1").removeAttrs("href");
            $("#HrefFase1").removeAttrs("data-toggle");
            $("#liFase1").addClass("disabled");
        }
        function DesabilitaFase2() {
            $("#HrefFase2").removeAttrs("href");
            $("#HrefFase2").removeAttrs("data-toggle");
            $("#liFase2").removeClass("active").addClass("disabled");
            $("#fase2").removeClass("tab-pane fade active in").addClass("tab-pane fade");
        }
        function HabilitaFase1() {
            $("#HrefFase1").attr("href", "#fase1");
            $("#HrefFase1").attr("data-toggle", "tab");
            $("#liFase1").removeClass("disabled").addClass("active");
            $("#fase1").removeClass("tab-pane fade").removeClass("tab-pane fade in").addClass("tab-pane fade active in");
        }
        function HabilitaFase2() {
            $("#HrefFase2").attr("href", "#fase2");
            $("#HrefFase2").attr("data-toggle", "tab");
            $("#liFase2").removeClass("disabled");
        }
        function HabilitaFase34() {
            $("#HrefFase3").attr("href", "#fase3");
            $("#HrefFase3").attr("data-toggle", "tab");
            $("#liFase3").removeClass("disabled");
            $("#HrefFase4").attr("href", "#fase4");
            $("#HrefFase4").attr("data-toggle", "tab");
            $("#liFase4").removeClass("disabled");
            var Origem = $("#OrigemOcorrenciaFase2DropDownList").val();
            var Origem1 = $("#OrigemOcorrenciaItemNotaDropDownList").val();
            if (Origem == 8 || Origem1 == 8) {
                document.getElementById("CodigoClienteConferenciaItem").style.display = "block";
                document.getElementById("NomeclienteConferenciaItem").style.display = "block";
                document.getElementById("ConferenciaItem").style.display = "block";
                listaTransportadora();
            }
            else {
                document.getElementById("CodigoClienteConferenciaItem").style.display = "none";
                document.getElementById("NomeclienteConferenciaItem").style.display = "none";
                document.getElementById("ConferenciaItem").style.display = "none";
            }
        }
        function ValidaCamposObrigatorios() {
            var tipAtend = $("#TipoAtendimentoDropDownList option:selected").val();
            if (tipAtend != "0") {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
            }
            else {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4").addClass("col-md-4 has-error");
            }
            if (tipAtend != "0") {
                var oriOcorrencia = $("#OrigemOcorrenciaFase1DropDownList option:selected").val();
                if (oriOcorrencia != "0") {
                    $("#OrigemOcorrenciaFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
                }
                else {
                    $("#OrigemOcorrenciaFase1Div").removeClass("col-md-4").addClass("col-md-4 has-error");
                }
            }
            if ($("#CodClienteTextBox").val() == "") {
                $("#CodClienteTextBox").rules("add", { required: true });
                $("#NomeClienteTextBox").rules("add", { required: false });
            }
            else {
                $("#NomeClienteTextBox").rules("add", { required: true });
                $("#CodClienteTextBox").rules("add", { required: false });
            }
            if ($("#CodMotoristaTextBox").val() == "") {
                $("#CodMotoristaTextBox").rules("add", { required: true });
                $("#NomeMotoristaTextBox").rules("add", { required: false });
            }
            else {
                $("#NomeMotoristaTextBox").rules("add", { required: true });
                $("#CodMotoristaTextBox").rules("add", { required: false });
            }
            if ($("#CodMotoristaTextBox").val() != "0") {
                if ($("#CodPlacaTextBox").val() == "") {
                    $("#CodPlacaTextBox").rules("add", { required: true });
                    $("#DescricaoPlacaTextBox").rules("add", { required: false });
                }
                else {
                    $("#DescricaoPlacaTextBox").rules("add", { required: true });
                    $("#CodPlacaTextBox").rules("add", { required: false });
                }
            }
            else {
                $("#CodPlacaTextBox").rules("add", { required: false });
                $("#DescricaoPlacaTextBox").rules("add", { required: false });
            }

            if ($("#CadastrarRegistroOcorrenciasForm").valid()) {
                return true;
            }
            return false;
        }

        function ValidaTipoAtendimento() {
            var tipAtend = $("#TipoAtendimentoDropDownList option:selected").val();
            if (tipAtend != "0") {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
                return true;
            }
            else {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4").addClass("col-md-4 has-error");
                return false;
            }
            return false;
        }

        var espaco = "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"
        // ====================================== INÍCIO CLIENTE  ====================================== //
        $("#PesquisarClienteButton").click(function () {
            PesquisaTodosCliente();
        });
        $('#TableCliente').dataTable({
            "jQueryUI": true,
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "aoColumns": [
                        { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                        { "sClass": "left", "title": "Cód." },
                        { "sClass": "left", "title": "Nome&nbspFantasia" + espaco },
                        { "sClass": "left", "title": "Razão&nbspSocial" + espaco },
                        { "sClass": "right", "title": "CNPJ/CPF" + espaco.substring(0, 55) },
                        { "sClass": "right", "title": "Inscrição&nbspEstadual" },
                        { "sClass": "left", "title": "Endereço" + espaco },
                        { "sClass": "left", "title": "Cidade" + espaco.substring(0, 200) },
                        { "sClass": "left", "title": "Estado" }, ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
        });
        function PesquisaUmCliente(codigoCliente) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisaCliente")", { codigoCliente: $("#CodClienteTextBox").val() }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaUmCliente) {
                    if (data.listaClientes.length > 0) {
                        $("#NomeClienteTextBox").val(data.listaClientes[0].NomeFantasia);
                        $("#NomeClienteTextBox").valid();
                        if ($("#NomeMotoristaTextBox").val() == "") {
                            $("#CodMotoristaTextBox").focus();
                        }
                        else if ($("#DescricaoPlacaTextBox").val() == "") {
                            $("#CodPlacaTextBox").focus();
                        }
                        else {
                            $("#NomeClienteTextBox").focus();
                        }
                    }
                    else {
                        DialogPadrao("warning", "Aviso!", "warning", "Cliente não encontrado.", "btnOkClienteNaoEncontrado", "OK", true);
                    }
                }
                $('#progressBar').hide();
            });
        }
        function PesquisaTodosCliente() {
            $('#progressBar').show();
            $("#gridTableCliente").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisaCliente")", { codigoCliente: "" }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaTodosClientes) {
                    var arrayRow = new Array();
                    $('#TableCliente').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaClientes.length; i++) {
                        var codigo = data.listaClientes[i].CodigoCliente;
                        var nome = data.listaClientes[i].NomeFantasia;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarCliente('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Cliente'></span></a>";
                        var razaoSocial = data.listaClientes[i].RazaoSocial;
                        var cpf = data.listaClientes[i].CnpjCpf;
                        var ie = data.listaClientes[i].InscricaoEstadual;
                        var endereco = data.listaClientes[i].Endereco;
                        var cidade = data.listaClientes[i].Cidade;
                        var estado = data.listaClientes[i].Estado;
                        arrayRow[i] = new Array(selecionar, codigo, nome, razaoSocial, cpf, ie, endereco, cidade, estado);
                    }
                    $('#TableCliente').dataTable().fnAddData(arrayRow);
                    $('#TableCliente').dataTable().fnPageChange('first');
                    $("#gridTableCliente").slideToggle('fast');
                }
                $('#progressBar').hide();
                $('#ClienteDialog').modal('show');
            });
        }
        function SelecionarCliente(codigo, nome) {
            $('#CodClienteTextBox').val(codigo);
            $('#NomeClienteTextBox').val(nome);
            $("#CodClienteTextBox").valid();
            $("#NomeClienteTextBox").valid();
            $('#ClienteDialog').modal('hide');
            if ($("#NomeMotoristaTextBox").val() == "") {
                $("#CodMotoristaTextBox").focus();
            }
            else {
                $("#NomeClienteTextBox").focus();
            }
        }
        $("#CodClienteTextBox").focusin(function () {
            $("#CodClienteTextBox").rules("add", { required: true });
            $("#NomeClienteTextBox").rules("add", { required: false });
            $("#NomeClienteTextBox").val("");
            $("#NomeClienteTextBox").valid();
        });
        $("#CodClienteTextBox").keypress(function (e) {
            // Enter
            if (e.keyCode == 13) {
                if ($("#CodClienteTextBox").valid()) {
                    $("#NomeClienteTextBox").focus();
                    PesquisaUmCliente();
                }
                return false;
            }
            else {
                $("#NomeClienteTextBox").val("");
            }
        });
        $("#BtnFecharClienteDialog").click(function () {
            $('#ClienteDialog').modal('hide');
        });
        // ====================================== FIM CLIENTE  =========================================== //
        // ----------------------------------------------------------------------------------------------- //
        // =================================== INÍCIO MOTORISTA  ========================================= //
        $("#PesquisarMotoristaButton").click(function () {
            PesquisaTodosMotorista();
        });
        $('#TableMotorista').dataTable({
            "jQueryUI": true,
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "aoColumns": [
                        { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                        { "sClass": "left", "title": "Cod." },
                        { "sClass": "left", "title": "Nome" + espaco.substring(0, 280) },
                        { "sClass": "left", "title": "CPF" + espaco.substring(0, 75) },
                        { "sClass": "left", "title": "Endereço" + espaco.substring(0, 300) },
                        { "sClass": "left", "title": "Cidade" + espaco.substring(0, 215) },
                        { "sClass": "left", "title": "Estado" }, ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
        });
        function PesquisaUmMotorista(codigoMotorista) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisaMotorista")", { codigoMotorista: $("#CodMotoristaTextBox").val() },
            function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaUmMotorista) {
                    if (data.listaMotoristas.length > 0) {
                        $("#NomeMotoristaTextBox").val(data.listaMotoristas[0].Nome);
                        $("#NomeMotoristaTextBox").valid();
                        if ($("#NomeClienteTextBox").val() == "") {
                            $("#CodClienteTextBox").focus();
                        }
                        else if ($("#DescricaoPlacaTextBox").val() == "") {
                            $("#CodPlacaTextBox").focus();
                        }
                        else {
                            $("#NomeMotoristaTextBox").focus();
                        }
                    }
                    else {
                        DialogPadrao("warning", "Aviso!", "warning", "Motorista não encontrado.", "btnOkMotoristaNaoEncontrado", "OK", true);
                    }
                }
                $('#progressBar').hide();
            });
        }
        function PesquisaTodosMotorista() {
            $('#progressBar').show();
            $("#gridTableMotorista").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisaMotorista")", { codigoMotorista: "" }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaTodosMotoristas) {
                    var arrayRow = new Array();
                    $('#TableMotorista').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaMotoristas.length; i++) {
                        var codigo = data.listaMotoristas[i].CodigoMotorista;
                        var nome = data.listaMotoristas[i].Nome;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarMotorista('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Motorista'></span></a>";
                        var cpf = data.listaMotoristas[i].Cpf;
                        var endereco = data.listaMotoristas[i].Endereco;
                        var cidade = data.listaMotoristas[i].Cidade;
                        var estado = data.listaMotoristas[i].Estado;
                        arrayRow[i] = new Array(selecionar, codigo, nome, cpf, endereco, cidade, estado);
                    }
                    $('#TableMotorista').dataTable().fnAddData(arrayRow);
                    $('#TableMotorista').dataTable().fnPageChange('first');
                    $("#gridTableMotorista").slideToggle('fast');
                }
                $('#progressBar').hide();
                $('#MotoristaDialog').modal('show');
            });
        }
        function SelecionarMotorista(codigo, nome) {
            $('#CodMotoristaTextBox').val(codigo);
            $('#NomeMotoristaTextBox').val(nome);
            $("#CodMotoristaTextBox").valid();
            $("#NomeMotoristaTextBox").valid();
            $('#MotoristaDialog').modal('hide');
            if ($("#NomeClienteTextBox").val() == "") {
                $("#CodClienteTextBox").focus();
            }
            else {
                $("#NomeMotoristaTextBox").focus();
            }
        }
        $("#CodMotoristaTextBox").focusin(function () {
            $("#CodMotoristaTextBox").rules("add", { required: true });
            $("#NomeMotoristaTextBox").rules("add", { required: false });
            $("#NomeMotoristaTextBox").val("");
            $("#NomeMotoristaTextBox").valid();
        });
        $("#CodMotoristaTextBox").keypress(function (e) {
            var codigoMoto = $("#CodMotoristaTextBox").val();
            if (e.keyCode == 13) {
                if ($("#CodMotoristaTextBox").valid()) {
                    if (parseInt(codigoMoto) == 0) {
                        $("#NomeMotoristaTextBox").val("TRANSPORTADORA");
                        $("#CodPlacaTextBox").val("");
                        document.getElementById('CodPlacaTextBox').disabled = true;
                        $("#CodPlacaTextBox").rules("add", { required: false });
                        $("#CodPlacaTextBox").valid();
                        $("#DescricaoPlacaTextBox").val("");
                        document.getElementById('DescricaoPlacaTextBox').disabled = true;
                        $("#DescricaoPlacaTextBox").rules("add", { required: false });
                        document.getElementById('PesquisarPlacaButton').disabled = true;
                        if ($("#NomeClienteTextBox").val() == "") {
                            $("#CodClienteTextBox").focus();
                        }
                        else {
                            $("#NomeMotoristaTextBox").focus();
                        }
                    }
                    else {
                        document.getElementById('CodPlacaTextBox').disabled = false;
                        $("#CodPlacaTextBox").rules("add", { required: true });
                        document.getElementById('DescricaoPlacaTextBox').disabled = false;
                        $("#DescricaoPlacaTextBox").rules("add", { required: true });
                        document.getElementById('PesquisarPlacaButton').disabled = false;
                        $("#NomeClienteTextBox").focus();
                        PesquisaUmMotorista();
                    }
                }
                return false;
            }
            else {
                $("#NomeMotoristaTextBox").val("");
            }
        });
        $("#BtnFecharMotoristaDialog").click(function () {
            $('#MotoristaDialog').modal('hide');
        });
        // ====================================== FIM MOTORISTA  =========================================== //
        // ----------------------------------------------------------------------------------------------- //
        // =================================== INÍCIO DIALOG PADRAO  ========================================= //
        function DialogPadrao(tipoPanel, tituloDialog, tipoLabel, msgErro, idBotao, nomeBotao, focus) {
            var html_Dialog = ""
            + "<div class='modal-dialog'>"
            + "     <div class='panel panel-" + tipoPanel + "'>"
            + "         <div class='panel-heading'>"
            + "             <h3 class='panel-title'>" + tituloDialog + "</h3>"
            + "         </div>"
            + "         <div class='panel-body'>"
            + "             <div class='alert alert-dismissable alert-" + tipoLabel + "'>"
            + "                 <strong>" + msgErro + "</strong>"
            + "             </div>"
            + "             <div style='text-align:center'>"
            + "                 <button type='button' class='btn btn-default' id='" + idBotao + "'" + "onclick='$(\"#DialogPadrao\").hide();' data-dismiss='modal'>" + nomeBotao + "</button>"
            + "             </div>"
            + "         </div>"
            + "     </div>"
            + "</div>";
            $("#DialogPadrao").html(html_Dialog);
            $("#DialogPadrao").show();
            if (focus) {
                $("#" + idBotao).focus();
            }
            $("#btnOkClienteNaoEncontrado").click(function () {
                $("#CodClienteTextBox").focus();
            });
            $("#btnOkMotoristaNaoEncontrado").click(function () {
                $("#CodMotoristaTextBox").focus();
            });
            $("#btnOkDevolucaoSucesso").click(function () {
                window.location = '@Url.Action("Cadastrar", "Solicitacoes")';
            });
            $("#btnOkProtocolosAberto").click(function () {
                window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
            });

        }
        // =================================== FIM DIALOG PADRAO  ========================================= //
        // ----------------------------------------------------------------------------------------------- //
        // =============================== INÍCIO GRID NOTAS FISCAIS  ==================================== //
        $('#TableNotasFiscaisSaida').dataTable({
            "paging": false,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "bAutoWidth": true,
            "aoColumns": [
                        { "sClass": "center", "bSortable": false, "bSearchable": false },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "right" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" }, ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollY": 150,
            "scrollX": true,
            "jQueryUI": true,
        });
        function PesquisarNotasFiscaisSaida(codigoCliente, codigoMotorista, codPlaca, tipoAtendimento) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $("#gridTableNotasFiscaisSaida").hide();
            $.getJSON("@Url.Action("PesquisarNotasFiscaisSaida")", { codigoCliente: codigoCliente, codigoMotorista: codigoMotorista, codPlaca: codPlaca, tipoAtendimento: tipoAtendimento }, function sucess(data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    var arrayRow = new Array();
                    $('#TableNotasFiscaisSaida').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaNotasSaida.length; i++) {
                        var empresa = data.listaNotasSaida[i].CodigoEmpresa;
                        var filial = data.listaNotasSaida[i].CodigoFilial;
                        var serie = data.listaNotasSaida[i].SerieNota;
                        var numNF = data.listaNotasSaida[i].NumeroNota;
                        var selecionar = "<input type='radio' name='fruit' id='radioCarregarItens" + numNF + "' tabindex='-1' alt=\"\" title=\"Carregar Itens da Nota\">";
                        var emissao = data.listaNotasSaida[i].DataEmissao;
                        var valorLiquido = "R$ " + data.listaNotasSaida[i].ValorLiquido.toString().replace(".", ",");
                        var situacao = data.listaNotasSaida[i].SituacaoNota;
                        var tipo = data.listaNotasSaida[i].TipoNota;
                        var codCliente = data.listaNotasSaida[i].CodigoCliente;
                        var nomeCliente = data.listaNotasSaida[i].NomeCliente;
                        var tNS = data.listaNotasSaida[i].TipoTransacao;
                        var descricaoTns = data.listaNotasSaida[i].DescricaoTipoTransacao;
                        var codTransportadora = data.listaNotasSaida[i].CodigoTransportadora;
                        var indSituacaoConferencia = data.listaNotasSaida[i].IndicativoConferencia;
                        var diasFaturamento = data.listaNotasSaida[i].DiasFaturamento;
                        arrayRow[i] = new Array(selecionar, empresa, filial, serie, numNF, emissao, valorLiquido, situacao, tipo, codCliente, nomeCliente, tNS, descricaoTns, codTransportadora, indSituacaoConferencia, diasFaturamento);
                    }
                    $('#TableNotasFiscaisSaida').dataTable().fnAddData(arrayRow);
                    $('#TableNotasFiscaisSaida').dataTable().fnPageChange('first');
                    $("#gridTableNotasFiscaisSaida").slideToggle('fast');
                    $('#DivPanelFase2').show();
                }
                else {
                    DialogPadrao("warning", "Aviso!", "warning", "O cliente informado não possuí notas disponíveis para devolução ou o motorista informado não é o responsável pela entrega das notas desse cliente.", "btnOkDialogErroNotasFiscaisSaida", "OK", true);
                }
                $('#progressBar').hide();
            });
        }
        var idColunaTableNotasSaida;

        // Seleciona Transportadora do Cliente
        $("#PesquisarClienteButtonItens").click(function () {
            PesquisarTransportador();
        });

        $('#TableTransporte').dataTable({
            "jQueryUI": true,
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "aoColumns": [
                        { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                        { "sClass": "left", "title": "Cód." },
                        { "sClass": "left", "title": "Nome&nbspFantasia" + espaco },
                        { "sClass": "left", "title": "Razão&nbspSocial" + espaco },],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
        });

        function PesquisarTransportador() {
            //var ocorrencia = $("#NumRegistroTextBox").val();
            var ocorrencia = $("#NumNotaFiscalTextBox").val();
            //var Origem = $("#OrigemOcorrenciaItemNotaDropDownList").val();
            var Origem = $("#OrigemOcorrenciaFase2DropDownList").val();
            var origem1 = $("#OrigemOcorrenciaFase1Div").val();
            $('#progressBar').show();
            $("#gridTableTransporte").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("ConsultarTransportadora", "Aprovacoes")", { ocorrencia: ocorrencia, tipo: "T" }, function (data) {
                if (data.listaTransportador) {
                    var arrayRow = new Array();
                    $('#TableTransporte').dataTable().fnClearTable();
                    var array = 0;
                    if (data.listaTransportador.CODTRA > 1) {
                        var codigo = data.listaTransportador.CODTRA;
                        var nome = data.listaTransportador.NOMTRA;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarTransporte('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Cliente'></span></a>";
                        var razaoSocial = data.listaTransportador.APETRA;
                        arrayRow[array] = new Array(selecionar, codigo, nome, razaoSocial);
                        array = 1;
                    }
                    if (data.listaTransportador.CODRED != "0") {
                        var codigo = data.listaTransportador.CODRED;
                        var nome = data.listaTransportador.NOMETRAREDES;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarTransporte('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Cliente'></span></a>";
                        var razaoSocial = data.listaTransportador.CODREDAPETRA;
                        arrayRow[array] = new Array(selecionar, codigo, nome, razaoSocial);
                    }
                    $('#TableTransporte').dataTable().fnAddData(arrayRow);
                    $('#TableTransporte').dataTable().fnPageChange('first');
                    $("#gridTableTransporte").slideToggle('fast');
                }
                $('#progressBar').hide();
                $('#TransporteDialog').modal('show');
            });
        }

        function SelecionarTransporte(codigo, nome) {
            $("#CodigoClienteConferenciaItem").val("");
            $("#CodigoClienteConferenciaItem").focus();
            $("#TransporteDialog").modal("hide");
            setTimeout(function () {
                $("#CodigoClienteConferenciaItem").val(codigo);
                $("#NomeclienteConferenciaItem").val(nome);
                $("#CodigoClienteConferenciaItem").focus();
            }, 50);
        }

        function listaTransportadora() {
            var ocorrencia = $("#NumNotaFiscalTextBox").val();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("ConsultarTransportadora", "Aprovacoes")", { ocorrencia: ocorrencia, tipo: "T" }, function (data) {
                if (data.listaTransportador.CODTRA > 0) {
                    var CodTransportadora = data.listaTransportador.CODTRA;
                    var CodTraRedespacho = data.listaTransportador.CODRED;
                    //ValidaOcorrencia(CodTransportadora, CodTraRedespacho);
                    if (CodTransportadora > 1) {
                        $("#CodigoClienteConferenciaItem").val(data.listaTransportador.CODTRA);
                        $("#NomeclienteConferenciaItem").val(data.listaTransportador.NOMTRA);
                    } else if (CodTraRedespacho > 1) {
                        $("#CodigoClienteConferenciaItem").val(data.listaTransportador.CODRED);
                        $("#NomeclienteConferenciaItem").val(data.listaTransportador.NOMETRAREDES); //
                    } else {
                        $("#CodigoClienteConferenciaItem").val(0);
                        $("#NomeclienteConferenciaItem").val("");
                    }
                }
                
            });
        }

        // Recupera o id da coluna clicada para selecionar a linha clicada no evento abaixo -- td ==> coluna
        $('#TableNotasFiscaisSaida tbody').on('click', 'td', function () {
            // idColuna
            idColunaTableNotasSaida = $(this).index();
        });
        // Recupera o ID da linha clicada -- tr ==> linha
        $('#TableNotasFiscaisSaida tbody').on('click', 'tr', function () {
            // Coluna Carregar
            if (idColunaTableNotasSaida == 0) {
                var table = $('#TableNotasFiscaisSaida').DataTable();
                // Se a linha que está sendo clicada não estiver selecionada, realiza as atividades abaixo...
                if (!$(this).hasClass('selected')) {
                    // Remove as linhas que já estevam selecionadas
                    table.$('tr.selected').removeClass('selected');
                    // Seleciona a linha que está sendo clicada
                    $(this).addClass('selected');
                    // Recupera os dados da linha clicada para carregar os campos abaixo
                    var dadosLinha = table.row(this).data();
                    var empresa = dadosLinha[1];
                    var filial = dadosLinha[2];
                    var serie = dadosLinha[3];
                    var numeroNota = dadosLinha[4];
                    // id do Radiobox da coluna que foi clicada
                    var idRadio = "radioCarregarItens" + numeroNota;
                    $("#" + idRadio).prop("checked", true);
                    // Carrega os itens da nota selecionada
                    PesquisarItensNotasFiscaisSaida(empresa, filial, serie, numeroNota);
                }
            }
        });
        // =================================== FIM GRID NOTAS FISCAIS  ========================================= //
        // ----------------------------------------------------------------------------------------------------- //
        // ================================== INÍCIO GRID ITENS NOTAS FISCAIS  ================================= //
        $('#TableItensNotasFiscaisSaida').dataTable({

            "paging": false,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "bAutoWidth": true,
            "bDeferRender": true,
            "aoColumns": [
                        { "sClass": "dpass", "bSortable": false, "bSearchable": false },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "left" },
                        { "sClass": "left" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "dpass" },
            ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollY": 330,
            "scrollX": true,
            "jQueryUI": true,
        });
        function PesquisarItensNotasFiscaisSaida(empresa, filial, serieNota, numeroNota) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $("#gridTableItensNotasFiscaisSaida").hide();
            $.getJSON("@Url.Action("PesquisarItensNotasFiscaisSaida")", { filial: filial, numeroNota: '' + numeroNota, serieNota: '' + serieNota }, function sucess(data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    var arrayRow = new Array();
                    $('#TableItensNotasFiscaisSaida').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaItens.length; i++) {
                        var seq = data.listaItens[i].Sequencia;
                        var selecionar = "<input type='checkbox' id='checkBoxSelecionarItensDev" + numeroNota + "-" + seq + "' tabindex='-1' alt=\"\" title=\"Selecionar Item para Devolução\">";
                        var tNS = data.listaItens[i].Transacao;
                        var codigo = data.listaItens[i].CodigoProduto;
                        var descricao = data.listaItens[i].DescricaoProduto;
                        var qtdeFaturada = data.listaItens[i].QtdeFaturada;
                        var qtdeDevolucao = data.listaItens[i].QtdeDevolucao;
                        var precoUnitario = "R$ " + data.listaItens[i].PrecoUnitario.toString().replace(".", ",");
                        var motivoDevolucao = data.listaItens[i].MotivoDevolucao;
                        var origemOcorrencia = data.listaItens[i].OrigemOcorrencia;
                        var perDescUni = data.listaItens[i].PercDescUnit + " %";
                        var percDescIpi = data.listaItens[i].PercIpi + " %";
                        var valorIpi = data.listaItens[i].ValorIpi.toString().replace(".", ",");
                        var valorLiquido = "R$ " + data.listaItens[i].ValorLiquido.toString().replace(".", ",");
                        var valorSt = "R$ " + data.listaItens[i].ValorSt.toString().replace(".", ",");
                        var descontoSuframa = "R$ " + data.listaItens[i].DescontoSuframa.toString().replace(".", ",");
                        var dep = data.listaItens[i].Departamento;
                        var valorFrete = "R$ " + data.listaItens[i].ValorFrete.toString().replace(".", ",");
                        var saldo = data.listaItens[i].SaldoDevolucao;
                        var idLinha = i.toString();
                        arrayRow[i] = new Array(selecionar, seq, tNS, codigo, descricao, qtdeFaturada, qtdeDevolucao, precoUnitario, motivoDevolucao, origemOcorrencia, perDescUni, percDescIpi, valorIpi, valorLiquido, valorSt, dep, valorFrete, descontoSuframa, idLinha, saldo);
                    }
                    $('#TableItensNotasFiscaisSaida').dataTable().fnAddData(arrayRow);
                    $('#TableItensNotasFiscaisSaida').dataTable().fnPageChange('first');
                    $("#gridTableItensNotasFiscaisSaida").slideToggle('fast');
                    PopulaCamposDivItensNotasFiscaisSaida(empresa, filial, serieNota, numeroNota);
                    $('#DivItensNotasFiscaisSaida').show();
                    SetarSelectMotivoOrigem();
                    LimpaCamposTotais();
                    focusFinalPagina();
                }
                else {
                    $('#DivItensNotasFiscaisSaida').hide();
                    DialogPadrao("warning", "Aviso!", "warning", "A nota selecionada não possuí nenhum item.", "btnOkItensNaoEncontrados", "OK", true);
                }
                $('#progressBar').hide();
            })
        }
        // Popula campos
        function PopulaCamposDivItensNotasFiscaisSaida(empresa, filial, serie, numeroNota) {
            $("#EmpresaTextBox").val(empresa);
            $("#FilialTextBox").val(filial);
            $("#SerieTextBox").val(serie);
            $("#NumNotaFiscalTextBox").val(numeroNota);
        }
        // Seta motivo e origem para Selecione...
        function SetarSelectMotivoOrigem() {
            $("#MotivoDevolucaoFase2DropDownList").prop('selectedIndex', 0);
            $("#OrigemOcorrenciaFase2DropDownList").prop('selectedIndex', 0);
            //document.getElementById('OrigemOcorrenciaFase2DropDownList').disabled = true;
        }
        // Limpa campos das quantidades totais de itens de nota fiscal
        function LimpaCamposTotais() {
            $("#QtdeTotalTextBox").val("");
            $("#ValorBrutoTextBox").val("");
            $("#ValorIpiTextBox").val("");
            $("#ValorLiquidoTextBox").val("");
            $("#ValorStTextBox").val("");
            $("#SuframaTextBox").val("");
        }
        // Direciona o foco para a parte inferior da página
        function focusFinalPagina() {
            setTimeout(function () {
                //window.location.hash = '#AdicionarItenButton';
                scrollTo(0, 490);
                var table = $('#TableItensNotasFiscaisSaida').dataTable();
                table.fnFilter('');
            }, 800);
        }
        // Variavel para guardar o indice da coluna que foi clicada para controle do checkbox da tabela de itens
        var idColunaCheckTableItensNotasSaida;
        $('#TableItensNotasFiscaisSaida tbody').on('click', 'td', function () {
            idColunaCheckTableItensNotasSaida = $(this).index();
        });
        var idLinhaColunaInvisivel = "";
        var qtdeFaturadaItemNota;
        var saldo;
        // Quando o checkbox da tabela de itens de notas fiscal for marcado, a linha do checkbox marcado recebe "seleção"...
        $('#TableItensNotasFiscaisSaida tbody').on('click', 'tr', function () {
            var table = $('#TableItensNotasFiscaisSaida').DataTable();
            // Recupera o número da nota da linha clicada para carregar os itens
            var dadosLinha = table.row(this).data();
            var numeroNota = $("#NumNotaFiscalTextBox").val();
            var seqNota = dadosLinha[1];
            qtdeFaturadaItemNota = dadosLinha[5];
            var qtdeDev = dadosLinha[6];
            var motivoDev = dadosLinha[8];
            var origemOcor = dadosLinha[9];
            idLinhaColunaInvisivel = dadosLinha[18];
            saldo = dadosLinha[19];
            if (idColunaCheckTableItensNotasSaida == 0) {
                var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                if ($(this).hasClass('selected')) {
                    $("#" + idCheckBox).prop("checked", false);
                    $(this).removeClass('selected');
                }
                else {
                    $("#" + idCheckBox).prop("checked", true);
                    $(this).addClass('selected');
                }
                AtualizaTotais();
                
            }
            else {
                AbrirAlterarItemNotaDialog(numeroNota, seqNota, qtdeDev, motivoDev, origemOcor);
                
            }
        });
        function AbrirAlterarItemNotaDialog(numeroNota, seqNota, qtdeDev, motivoDev, origemOcor) {
            $('#LabelErroAlterarItemNotaDialog').hide();
            if (parseInt(qtdeDev) > 0) {
                $('#QtdeDevolucaoItemNotaTextBox').val(qtdeDev);
            }
            else {
                $('#QtdeDevolucaoItemNotaTextBox').val("");
            }
            $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: false });
            $("#FieldErrorQtdeDevFat").removeClass("field-validation-error").addClass("field-validation-valid");
            $("#FieldErrorMotivoDevolucaoItemNota").removeClass("field-validation-error").addClass("field-validation-valid");
            $("#FieldErrorOrigemOcorrenciaItemNota").removeClass("field-validation-error").addClass("field-validation-valid");
            $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            var motivos = document.getElementById('MotivoDevolucaoItemNotaDropDownList');
            for (var i = 0; i < motivos.length; i++) {
                if (motivos[i].text == motivoDev) {
                    var codMotivo = parseInt(motivos[i].value);
                    $('#MotivoDevolucaoItemNotaDropDownList').val(codMotivo);
                    CarregaDropDownOrigemOcorrencia(codMotivo, "OrigemOcorrenciaItemNotaDropDownList", origemOcor);
                }
            }

            $('#AlterarItemNotaDialog h3').text("Alterar Nota " + numeroNota + " Item Sequência " + seqNota);
            $('#AlterarItemNotaDialog').modal('show');
            $('#QtdeDevolucaoItemNotaTextBox').focus();
        }
        // Atualiza totais grid Itens de nota fical
        function AtualizaTotais() {
            var table = $('#TableItensNotasFiscaisSaida').DataTable();
            // Recebe os valores de todas as linhas selecionadas
            var data = table.rows('.selected').data();
            var qtdeFaturada = 0;
            var qtdeDevolucao = 0;
            var qtdeTotal = 0;
            var valorBruto = 0.00;
            var valorIpi = 0.00;
            var valorLiquido = 0.00;
            var valorSt = 0.00;
            var descontoSuframa = 0.00;
            var valorFrete = 0.00;
            var valorFreteTotal = 0.00;

            for (var i = 0; i < data.length; i++) {
                qtdeFaturada = data[i][5];
                qtdeDevolucao = data[i][6];
                valorFrete = parseFloat(data[i][16].toString().replace("R$ ", "").replace(",", "."));
                qtdeDevolucao = parseInt(qtdeDevolucao);
                qtdeTotal = qtdeTotal + qtdeDevolucao;
                var precoUnitario = data[i][7].toString().replace("R$ ", "").replace(",", ".");

                valorBruto = (parseFloat(valorBruto) + ((parseFloat(precoUnitario) * qtdeDevolucao))).toFixed(2);

                var vlIpi = data[i][12].toString().replace(",", ".");
                var vlIpiUnidade = qtdeDevolucao * (parseFloat(vlIpi) / qtdeFaturada);
                valorIpi = valorIpi + vlIpiUnidade;
                var vlSt = data[i][14].toString().replace("R$ ", "").replace(",", ".");
                var Descsuframa = data[i][17].toString().replace("R$ ", "").replace(",", ".");

                var suframa = qtdeDevolucao * (parseFloat(Descsuframa) / qtdeFaturada);
                var vlrStUnidade = qtdeDevolucao * (parseFloat(vlSt) / qtdeFaturada);
                descontoSuframa = descontoSuframa + suframa;

                valorSt = valorSt + vlrStUnidade;
                if (data.length == 1) {
                    valorFreteTotal = (valorFrete / data[i][5]) * parseFloat(data[i][6].toString().replace("R$ ", "").replace(",", "."))
                } else {
                    valorFreteTotal = valorFrete + valorFreteTotal;
                }
            }

            valorLiquido = (parseFloat(valorBruto.toString()) + parseFloat(valorIpi.toString()) + parseFloat(valorSt.toString()) + parseFloat(valorFreteTotal.toString()) - parseFloat(descontoSuframa)).toFixed(2);
            valorFreteGlobal = valorFreteTotal;
            valorIpi = parseFloat(valorIpi.toString()).toFixed(2);
            valorSt = parseFloat(valorSt.toString()).toFixed(2);
            descontoSuframa = parseFloat(descontoSuframa.toString()).toFixed(2);
            $("#QtdeTotalTextBox").val(qtdeTotal);
            $("#ValorBrutoTextBox").val(valorBruto);
            $("#ValorIpiTextBox").val(valorIpi);
            $("#ValorStTextBox").val(valorSt);
            $("#SuframaTextBox").val(descontoSuframa);
            $("#ValorLiquidoTextBox").val(valorLiquido);
            HabilitaMaskaraMoeda();
        }
        // Valida se somente foi digitado números
        function ValidaNumero(texto) {
            var numeros = "0123456789";
            var somenteNumero = true;
            texto = texto.toString().toLowerCase();
            for (i = 0; i < texto.length; i++) {
                if (!(numeros.indexOf(texto.charAt(i), 0) != -1)) {
                    somenteNumero = false;
                }
            }
            return somenteNumero;
        }
        // =================================== FIM GRID ITENS NOTAS FISCAIS  ========================================= //
        // ----------------------------------------------------------------------------------------------------------- //
        // ================================== INÍCIO GRID ITENS DE DEVOLUÇÃO   ======================================= //
        $('#TableItensNotasFiscaisDevolucao').dataTable({
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": false,
            "Info": true,
            "bLengthChange": true,
            "bAutoWidth": true,
            "aoColumns": [
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "left" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" }, ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página&nbsp&nbsp",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
            "jQueryUI": true,
        });
        // Seleciona as linhas da grid de itens de devolução de nota fiscal
        $('#TableItensNotasFiscaisDevolucao tbody').on('click', 'tr', function () {
            $(this).toggleClass('selected');
        });
        // Adiciona os itens selecionados na fase 3
        $('#AdicionarItenButton').click(function () {
            // Limpa a pesquisa da grid (Campo pesquisar) -- Se Houver
            $('#TableItensNotasFiscaisSaida').dataTable().fnFilter('');
            if (ValidaCamposGridItensNotaFiscal()) {
                if (ValidaItensIncluidosGridDevolucao()) {
                    AddItensGridDevolucao();
                    var classe = document.getElementById('liFase3').className;
                    if (classe == "disabled") {
                        MostraBotaoExcluirItensDev();
                    }
                    AtualizaTotaisDevolucao();
                    HabilitaFase34();
                    $('#DivPanelFase3').show();
                    DialogPadrao("success", "Sucesso!", "success", "Itens adicionados com sucesso!", "btnOkDialogItensAddSucesso", "OK", true);
                    AtualizaTotais();
                }
            }
        });
        function MostraBotaoExcluirItensDev() {
            $('<button id="ExcluirItemDevolucaoButton" class="delete_row ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" type="button" aria-disabled="false"><span class=""></span><span class="ui-button-text">Excluir</span></button>').appendTo('div.dataTables_length');
            // Botão excluir itens de devolução
            $('#ExcluirItemDevolucaoButton').click(function () {
                var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
                // Recebe os valores de todas as linhas selecionadas
                var data = table.rows('.selected').data();
                if (data.length > 0) {
                    table.row('.selected').remove().draw(false);
                    AtualizaTotaisDevolucao();
                    AtualizaTotaisNotasReceberExclusao();
                    DialogPadrao("success", "Sucesso!", "success", "Iten(s) excluído(s) com sucesso!", "btnOkDialogItensExcSucesso", "OK", true);
                }
                else {
                    DialogPadrao("warning", "Aviso!", "warning", "Favor selecionar ao menos um item para excluir.", "btnOkItensExcErro", "OK", true);
                }
            });
        }
        // Valida a integridade dos registros
        function ValidaCamposGridItensNotaFiscal() {
            var table = $('#TableItensNotasFiscaisSaida').DataTable();
            // Recebe os valores de todas as linhas selecionadas
            var data = table.rows('.selected').data();
            if (data.length == 0) {
                msgErro = "Favor selecionar ao menos um item de nota fiscal."
            }
            else {
                var msgErro = "";
                for (var i = 0; i < data.length; i++) {
                    var soNumero = ValidaNumero(data[i][6]);
                    if (!soNumero) {
                        msgErro = msgErro + "A quantidade de devolução da Seq. " + data[i][1] + " aceita somente números inteiros.<br/>";
                    }
                    else if (parseInt(data[i][6]) == 0) {
                        msgErro = msgErro + "A quantidade de devolução da Seq. " + data[i][1] + " não pode ser zero.<br/>";
                    }
                    if (data[i][8].indexOf("Selecione") > -1) {
                        msgErro = msgErro + "O motivo de devolução da Seq. " + data[i][1] + " não foi selecionado.<br/>";
                    }
                    if (data[i][9].indexOf("Selecione") > -1) {
                        msgErro = msgErro + "A origem da ocorrência da Seq. " + data[i][1] + " não foi selecionada.<br/>";
                    }
                }
                var dataTotal = table.rows().data();
                var dataNaoSelec = new Array();
                var indicedataNaoSelec = 0;
                for (var y = 0; y < dataTotal.length; y++) {
                    var valida = false;
                    for (var x = 0; x < data.length; x++) {
                        if (dataTotal[y] == data[x]) {
                            valida = true;
                        }
                    }
                    if (!valida) {
                        dataNaoSelec[indicedataNaoSelec] = dataTotal[y];
                        indicedataNaoSelec = indicedataNaoSelec + 1;
                    }
                }
                if (dataNaoSelec.length > 0) {
                    for (var i = 0; i < dataNaoSelec.length; i++) {
                        if (parseInt(dataNaoSelec[i][6]) != "0") {
                            msgErro = msgErro + "A quantidade de devolução da Seq. " + dataNaoSelec[i][1] + " foi informada porém não está selecionada. Digite zero ou selecione a mesma para devolução.<br/>";
                        }
                    }
                }
            }
            if (msgErro != "") {
                DialogPadrao("warning", "Aviso!", "warning", msgErro, "BtnOkValidaDevolucaoDialog", "OK", true);
                return false;
            }
            return true;
        }
        // Verifica se os itens que estão sendo incluídos para devolução já foram incluídos (duplicidade)
        function ValidaItensIncluidosGridDevolucao() {
            var tableSelec = $('#TableItensNotasFiscaisSaida').DataTable();
            var datatableSelec = tableSelec.rows('.selected').data();
            var x = $("#NumNotaFiscalTextBox").val();
            var tableDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var datatableDevolucao = tableDevolucao.rows().data();
            if (datatableDevolucao.length > 0) {
                var msgErro = "";
                for (var i = 0; i < datatableSelec.length; i++) {
                    for (var x = 0; x < datatableDevolucao.length; x++) {
                        if (numeroNota == datatableDevolucao[x][3] && datatableSelec[i][1] == datatableDevolucao[x][4]) {
                            msgErro = msgErro + "O item da nota " + numeroNota + " Seq " + datatableSelec[i][1] + " já foi selecionado para devolução.<br/>";
                        }
                    }
                }
                if (msgErro != "") {
                    msgErro = msgErro + "<br/>Remova o(s) iten(s) da seleção ou remova o(s) iten(s) da tabela de devolução (Fase 3) para adicionar novamente."
                    DialogPadrao("danger", "Aviso!", "danger", msgErro, "BtnOkValidaItensIncluidos", "OK", true);
                    return false;
                }
            }
            return true;
        }
        function dataAtualFormatada() {
            var data = new Date();
            var dia = data.getDate();
            if (dia.toString().length == 1)
                dia = "0" + dia;
            var mes = data.getMonth() + 1;
            if (mes.toString().length == 1)
                mes = "0" + mes;
            var ano = data.getFullYear();
            return dia + "/" + mes + "/" + ano;
        }
        // Add os itens de nota fiscal selecionados para devolução (fase 3)
        function AddItensGridDevolucao() {
            var dtHrAtual = dataAtualFormatada();
            var codUsuarioLogado = '@Session[NWORKFLOW_WEB.MVC_4_BS.Views.Util.SessionKeys.CodigoUsuarioLogado]';
            var nomeUsuarioLogado = '@Session[NWORKFLOW_WEB.MVC_4_BS.Views.Util.SessionKeys.NomeUsuarioLogado]';
            var tableSelec = $('#TableItensNotasFiscaisSaida').DataTable();
            var data = tableSelec.rows('.selected').data();
            var tableDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var empresa = $("#EmpresaTextBox").val();
            var filial = $("#FilialTextBox").val();
            var serie = $("#SerieTextBox").val();
            var numNota = $("#NumNotaFiscalTextBox").val();
            var valida = ValidaTotaisNotasReceber();
            for (var i = 0; i < data.length; i++) {
                var codProDer = data[i][3].toString().split(" ");
                tableDevolucao.row.add([
                    empresa,
                    filial,
                    serie,
                    numNota,
                    data[i][1],
                    data[i][2],
                    codProDer[0],
                    codProDer[1],
                    data[i][4],
                    data[i][5],
                    data[i][6],
                    data[i][9],
                    data[i][8],
                    data[i][7],
                    data[i][10],
                    data[i][11],
                    data[i][12],
                    data[i][13],
                    data[i][14],
                    data[i][15],
                    dtHrAtual,
                    codUsuarioLogado + " - " + nomeUsuarioLogado,
                    data[i][17]
                ]).draw();
            }
            if (valida) {
                AtualizaTotaisNotasReceber();
            }
            tableSelec.row('.selected').remove().draw(false);
            var dataTotal = tableSelec.rows().data();
            if (dataTotal.length == 0) {
                $('#DivItensNotasFiscaisSaida').hide();
            }
        }
        function DataHoraAtual() {
            var d = new Date();
            var dataHoraAtual = (
                ("00" + (d.getMonth() + 1)).slice(-2) + "/" +
                ("00" + d.getDate()).slice(-2) + "/" +
                d.getFullYear() + " " +
                ("00" + d.getHours()).slice(-2) + ":" +
                ("00" + d.getMinutes()).slice(-2) + ":" +
                ("00" + d.getSeconds()).slice(-2)
            );
            return dataHoraAtual;
        }
        var notasAdicionadasDevolucao = "";
        function AtualizaTotaisNotasReceber() {
            var tableNotas = $('#TableNotasFiscaisSaida').DataTable();
            var dataNotas = tableNotas.rows().data();
            var tableItens = $('#TableItensNotasFiscaisSaida').DataTable();
            //var dataItens = tableItens.rows('.selected').data();
            var totalNotas = 0;
            var valorAtualTotalNotas = $("#ValorTotalNotasTextBox").val().replace(".", "").replace(",", ".");
            var numNota = $("#NumNotaFiscalTextBox").val();
            notasAdicionadasDevolucao = notasAdicionadasDevolucao + numNota + "-";
            for (var y = 0; y < dataNotas.length; y++) {
                if (numNota == dataNotas[y][4]) {
                    totalNotas = dataNotas[y][6].toString().replace("R$ ", "").replace(",", ".");
                    if (valorAtualTotalNotas != "") {
                        totalNotas = (parseFloat(valorAtualTotalNotas.toString().replace(",", ".")) + parseFloat(totalNotas)).toFixed(2);
                    }
                    else {
                        totalNotas = parseFloat(totalNotas).toFixed(2);
                    }
                    $("#ValorTotalNotasTextBox").val(totalNotas.toString().replace(".", ","));
                    return;
                }
            }
        }
        // Verifica se a nota do item que está sendo incluído já foi incluído anteriormente para não somar o total da nota novamente no campo de valor total das notas faturadas...
        function ValidaTotaisNotasReceber() {
            var numNota = $("#NumNotaFiscalTextBox").val();
            var tableItensDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var dataItensDevolucao = tableItensDevolucao.rows().data();
            for (var y = 0; y < dataItensDevolucao.length; y++) {
                if (numNota == dataItensDevolucao[y][3]) {
                    return false;
                }
            }
            return true;
        }
        // Atualiza totais grid Itens de devolução de nota fical
        function AtualizaTotaisDevolucao() {
            var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
            // Recebe os valores de todas as linhas selecionadas
            var data = table.rows().data();
            var qtdeFaturada = 0;
            var qtdeDevolucao = 0;
            var qtdeTotal = 0;
            var valorBruto = 0;
            var valorIpi = 0;
            var valorSuframa = 0;
            var valorSt = 0.00;
            var valorLiquido = 0;
            for (var i = 0; i < data.length; i++) {
                qtdeFaturada = parseInt(data[i][09]);
                qtdeDevolucao = parseInt(data[i][10]);
                qtdeTotal = qtdeTotal + qtdeDevolucao;
                var precoUnitario = data[i][13].toString().replace("R$ ", "").replace(",", ".");
                valorBruto = (parseFloat(valorBruto) + ((parseFloat(precoUnitario) * qtdeDevolucao))).toFixed(2);
                var vlIpi = data[i][16].toString().replace(",", ".");
                var vlIpiUnidade = qtdeDevolucao * (parseFloat(vlIpi) / qtdeFaturada);
                valorIpi = valorIpi + vlIpiUnidade;
                var vlSt = data[i][18].toString().replace("R$ ", "").replace(",", ".");
                var vlrStUnidade = qtdeDevolucao * (parseFloat(vlSt) / qtdeFaturada);
                valorSt = valorSt + vlrStUnidade;
                var descontoSuframa = data[i][22].toString().replace("R$ ", "").replace(",", ".");
                var suframa = qtdeDevolucao * (parseFloat(descontoSuframa) / qtdeFaturada);
                valorSuframa = valorSuframa + suframa;
            }

            valorLiquido = (parseFloat(valorBruto.toString()) + parseFloat(valorIpi.toString()) + parseFloat(valorSt.toString()) + parseFloat(valorFreteGlobal.toString()) - parseFloat(valorSuframa.toString())).toFixed(2);
            valorIpi = parseFloat(valorIpi.toString()).toFixed(2);
            valorSt = parseFloat(valorSt.toString()).toFixed(2);
            $("#QtdeTotalDevolucaoTextBox").val(qtdeTotal);
            $("#ValorBrutoDevolucaoTextBox").val(valorBruto);
            $("#ValorIpiDevolucaoTextBox").val(valorIpi);
            $("#ValorStDevolucaoTextBox").val(valorSt);
            $("#ValorLiquidoDevolucaoTextBox").val(valorLiquido);
            var totalNotas = $("#ValorTotalNotasTextBox").val();
            var valorReceber = (parseFloat(totalNotas.replace(",", ".")) - valorLiquido).toFixed(2);
            $("#ValorReceberTextBox").val(valorReceber.toString().replace(".", ","));
        }
        // Quando todos os itens de devolução de uma nota fiscal são excluídos, atualiza os campos de valor total das notas e valor a receber
        function AtualizaTotaisNotasReceberExclusao() {
            var notasAdd = notasAdicionadasDevolucao.split("-")
            var tableItensDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var dataItensDevolucao = tableItensDevolucao.rows().data();
            for (var x = 0; x < notasAdd.length; x++) {
                var excluido = true;
                for (var y = 0; y < dataItensDevolucao.length; y++) {
                    if (notasAdd[x] == dataItensDevolucao[y][3]) {
                        excluido = false;
                    }
                }
                if (excluido) {
                    var tableNotas = $('#TableNotasFiscaisSaida').DataTable();
                    var dataNotas = tableNotas.rows().data();
                    var valorNota = 0;
                    for (var y = 0; y < dataNotas.length; y++) {
                        if (notasAdd[x] == dataNotas[y][4]) {
                            valorNota = dataNotas[y][6].toString().replace("R$ ", "").replace(".", "").replace(",", "");
                        }
                    }
                    var valorAtualTotalNotas = $("#ValorTotalNotasTextBox").val().toString().replace(".", "").replace(",", "");
                    var totalNotas = parseFloat(valorAtualTotalNotas) - parseFloat(valorNota);
                    $("#ValorTotalNotasTextBox").val(totalNotas);
                    notasAdicionadasDevolucao = notasAdicionadasDevolucao.replace(notasAdd[x], "");
                }
            }

            var valorLiquido = $("#ValorLiquidoDevolucaoTextBox").val().toString().replace(".", "").replace(",", "");
            var valorReceber = totalNotas - parseFloat(valorLiquido);
            $("#ValorReceberTextBox").val(valorReceber);
            HabilitaMaskaraMoedaDevolucao();
        }
        // ================================== FIM GRID ITENS DE DEVOLUÇÃO  ====================================== //
        // ----------------------------------------------------------------------------------------------------- //
        // =========================== INÍCIO MOTIVO DEVOLUCAO E ORIGEM OCORRÊNCIA  ============================ //
        function MudarMotivoDevolucao() {
            scrollTo(0, 0);
            $('#progressBar').show();
            setTimeout(function () {
                var codigoMotivo = $("#MotivoDevolucaoFase2DropDownList option:selected").val();
                var descricaoMotivo = $("#MotivoDevolucaoFase2DropDownList option:selected").text();
                if (codigoMotivo != "0") {
                    //AQUI
                    //CarregaDropDownOrigemOcorrencia(codigoMotivo, "OrigemOcorrenciaFase2DropDownList", "");
                }
                else {
                    //$("#OrigemOcorrenciaFase2DropDownList").empty();
                    //$("#OrigemOcorrenciaFase2DropDownList").append($('<option></option>').val("0").html("Selecione..."));
                    document.getElementById('OrigemOcorrenciaFase2DropDownList').disabled = true;
                }

                var table = $('#TableItensNotasFiscaisSaida').dataTable();
                $(table.fnSettings().aoData).each(function () {
                    if ($(this.nTr).hasClass('selected')) {
                        $(this.nTr).removeClass('selected');
                    }
                    var dadosLinha = table.fnGetData($(this.nTr).index());
                    var qtdeFat = dadosLinha[5];
                    var numeroNota = $("#NumNotaFiscalTextBox").val();
                    table.fnUpdate("0", $(this.nTr).index(), 6, false, false);
                    //aquio
                    table.fnUpdate(descricaoMotivo, $(this.nTr).index(), 8, false, false);
                    table.fnUpdate(qtdeFat, $(this.nTr).index(), 6, false, false);
                    var dadosLinha = table.fnGetData($(this.nTr).index());
                    var seqNota = dadosLinha[1];
                    //table.fnUpdate("Selecione...", $(this.nTr).index(), 9, false, false);
                    var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                    $(this.nTr).addClass('selected');
                    $("#" + idCheckBox).prop("checked", true);
                });
                $('#progressBar').hide();
                scrollTo(0, 490);
                AtualizaTotais();
            }, 10);
        }
        function MudarOrigemOcorrencia() {
            scrollTo(0, 0);
            $('#progressBar').show();
            setTimeout(function () {
                var valorOrigem = $("#OrigemOcorrenciaFase2DropDownList option:selected").text();
                //var numeroNota = $("#NumNotaFiscalTextBox").val();
                var table = $('#TableItensNotasFiscaisSaida').dataTable();
                var codigoOrigem = $("#OrigemOcorrenciaFase2DropDownList option:selected").val();
                if (codigoOrigem != "0") {
                    CarregaDropDownMotivoOcorrencia(codigoOrigem, "MotivoDevolucaoFase2DropDownList", "")
                }

                $(table.fnSettings().aoData).each(function () {
                    //var dadosLinha = table.fnGetData($(this.nTr).index());
                    //var seqNota = dadosLinha[1];
                    //var qtdeFat = dadosLinha[5];
                    //var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                    table.fnUpdate(valorOrigem, $(this.nTr).index(), 9, false, false);
                    //table.fnUpdate(qtdeFat, $(this.nTr).index(), 6, false, false);
                    //$(this.nTr).addClass('selected');
                    //$("#" + idCheckBox).prop("checked", true);
                });
                $('#progressBar').hide();
                scrollTo(0, 490);
                AtualizaTotais();
            }, 10);
        }
        // =========================== FIM MOTIVO DEVOLUCAO E ORIGEM OCORRÊNCIA  ============================ //
        // ----------------------------------------------------------------------------------------------------- //
        $('#FinalizarButton').click(function () {
            $("#ObservacoesTextBox").rules("add", { required: true, maxlength: 400 });
            ValidaObservacoes();
            if (ValidaDevolucao()) {
                if ($("#ObservacoesTextBox").valid()) {
                    $('#AcaoHidden').val('Finalizar');
                    var codCli = $('#CodClienteTextBox').val();
                    $('#CodClienteHidden').val(codCli);
                    var lista = ListaNotasAgrupadas();
                    ValidaNotasOutroProtocolo(lista);
                }
                else {
                    return false;
                }
            }
        });
        function ListaNotasAgrupadas() {
            $('#progressBar').show();
            var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var data = table.rows().data();
            var lista = "";
            for (var i = 0; i < data.length; i++) {
                var Filial = data[i][1] + "&";
                var NumeroNota = data[i][3] + "&";
                var FilNota = Filial + NumeroNota;
                if (lista.indexOf(FilNota) == -1) {
                    lista = lista + FilNota;
                }
            }
            return lista;
        }
        function ValidaNotasOutroProtocolo(lista) {
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("ValidaNotasOutroProtocolo")", { codProtocolo: "", tipAtend: tipAtend, lista: lista }, function (data) {
                if (data.Logado || data.ErrotipExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.validaNotas) {
                    ListaItensDevolucao();
                }
                else {
                    var msg = "Não é permitido gerar ocorrência de devolução em duplicidade.<br/><br/>" + data.msgRetorno;
                    DialogPadrao("warning", "ocorrência não cadastrada.", "warning", msg, "btnOkRegNaoCadastrado", "OK", true);
                    $('#progressBar').hide();
                }
            });
        }
        $('#RascunhoButton').click(function () {
            $("#ObservacoesTextBox").rules("add", { required: false, maxlength: 400 });
            ValidaObservacoes();
            if ($("#ObservacoesTextBox").valid()) {
                if (ValidaDevolucao()) {
                    $('#AcaoHidden').val('Rascunho');
                    ListaItensDevolucao();
                }
            }
            else {
                return false;
            }
        });
        $('#ObservacoesTextBox').bind('paste', null, function (e) {
            if (!e.keyCode) {
                ValidaObservacoes();
            }
        });
        var msgRetorno = '@Model.MensagemRetorno';
        var aprovado = '@Model.Aprovado';
        if (msgRetorno != "") {
            if (aprovado == 1) {
                DialogPadrao("danger", "Verifique!", "danger", msgRetorno, "btnOkProtocolosAberto", "OK", true);
            } else {
                if (msgRetorno.length > 160) {
                    DialogPadrao("danger", "Verifique!", "danger", msgRetorno, "btnOkProtocolosAberto", "OK", true);
                }
                else {
                    DialogPadrao("success", "Sucesso!", "success", msgRetorno, "btnOkDevolucaoSucesso", "OK", true);
                }
            }
        }
        $(window).keydown(function (event) {
            // Tab
            if (event.keyCode == 9) {
                var classBotao = document.getElementById('btnOkProtocolosAberto').className;
                return false;
            }
        });
        $("#ObservacoesTextBox").keypress(function (e) {
            ValidaObservacoes();
        });
        var keyCodeAnt = 0;
        $("#ObservacoesTextBox").keydown(function (event) {
            // BackSpace
            if (event.keyCode == 8) {
                ValidaObservacoes();
            }
            else if (keyCodeAnt == 17 && event.keyCode == 86) {
                // CTRL + V
                return false;
            }
            keyCodeAnt = event.keyCode;
        });
        function ValidaObservacoes() {
            setTimeout(function () {
                if ($("#ObservacoesTextBox").valid()) {
                    $("#ObservacoesDiv").removeClass("col-lg-10-2 has-error").addClass("col-lg-10-2");
                }
                else {
                    $("#ObservacoesDiv").removeClass("col-lg-10-2").addClass("col-lg-10-2 has-error");
                }
            }, 50);
        }
        function ValidaDevolucao() {
            var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var data = table.rows().data();
            var msgErro = "";
            if (data.length == 0) {
                msgErro = "Para salvar o registro, selecione ao menos um item para devolução.</br></br>"
            }
            var msgAnexos = ValidaAnexos();
            if (msgErro != "" || msgAnexos) {
                DialogPadrao("warning", "Aviso!", "warning", msgErro + msgAnexos, "btnOkDevolucaoErro", "OK", true);
                return false;
            }
            return true;
        }
        function ValidaAnexos() {
            var arquivos = document.getElementById("AnexosTextBox").files;
            var msgErro = "O(s) seguinte(s) arquivos(s) excede(m) o tamanho máximo de 2 MB por anexo. Verifique!</br></br>";
            var nomeArquivo = "";
            for (var i = 0; i < arquivos.length; i++) {
                var tamanhoArq = arquivos[i].size / 1024 / 1024;
                // tamanho máximo de cada arquivo 2 MB
                if (tamanhoArq > 2) {
                    nomeArquivo = nomeArquivo + arquivos[i].name + "<br/>";
                }
            }
            if (nomeArquivo != "") {
                return msgErro + nomeArquivo;
            }
            return "";
        }
        $("#PesquisarButton").click(function () {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
        });
        $("#CancelarButton").click(function () {
            window.location = '@Url.Action("Cadastrar", "Solicitacoes")';
        });
        $('#NumNotaSugTextBox').mask("9?99999", { placeholder: "" });
        $('#NumRegReprovadoTextBox').mask("9?9999", { placeholder: "" });
        $('#CodClienteTextBox').mask("9?9999", { placeholder: "" });
        $('#CodMotoristaTextBox').mask("9?9999", { placeholder: "" });
        //$('#CodPlacaTextBox').mask("aaa-????", { placeholder: "" });
        $('#QtdeDevolucaoItemNotaTextBox').mask("9?9999", { placeholder: "" });
        var keyCodeAnterior = 0;
        $(window).keydown(function (event) {
            // F5 ou CTRL + R
            if (event.keyCode == 116 || keyCodeAnterior == 17 && event.keyCode == 82) {
                window.location = '@Url.Action("Cadastrar", "Solicitacoes")';
                return false;
            }
            keyCodeAnterior = event.keyCode;
        });
        $("#SalvarAlteracaoBtn").click(function () {
            if (ValidaBtnSalvarItemNota()) {
                AlteraDadosLinhaItemNotaUpdate();
                SelecionaLinhaUpdate();
                $('#AlterarItemNotaDialog').modal('hide');
            }
        });

        function AlteraDadosLinhaItemNotaUpdate() {
            var contador = 0;
            var table = $('#TableItensNotasFiscaisSaida').dataTable();
            var valorQtdeDev = $("#QtdeDevolucaoItemNotaTextBox").val();
            var valorMotivo = $("#MotivoDevolucaoItemNotaDropDownList option:selected").text();
            var valorOrigem = $("#OrigemOcorrenciaItemNotaDropDownList option:selected").text();
            $(table.fnSettings().aoData).each(function () {
                var indice = contador;
                var dadosLinha = table.fnGetData(indice);
                
                if (dadosLinha[18] == idLinhaColunaInvisivel) {
                    table.fnUpdate(valorQtdeDev, indice, 6, false, false);
                    table.fnUpdate(valorMotivo, indice, 8, false, false);
                    table.fnUpdate(valorOrigem, indice, 9, false, false);
                }
                contador = contador + 1;
            });
        }
        function SelecionaLinhaUpdate() {
            var totalRows = $("#TableItensNotasFiscaisSaida tr").length - 1;
            for (var row = 0; row <= totalRows; row++) {
                var idIndLinha = $("#TableItensNotasFiscaisSaida tr").eq(row).find("td").eq(18).text();
                if (idIndLinha == idLinhaColunaInvisivel) {
                    var rowSel = $("#TableItensNotasFiscaisSaida tr").eq(row);
                    var numeroNota = $("#NumNotaFiscalTextBox").val();
                    var seqNota = $("#TableItensNotasFiscaisSaida tr").eq(row).find("td").eq(1).text();
                    var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                    $("#" + idCheckBox).prop("checked", true);
                    if (!$(rowSel).hasClass('selected')) {
                        $(rowSel).toggleClass('selected');
                    }
                    row = totalRows;
                }
            }
            AtualizaTotais();
        }
        $("#QtdeDevolucaoItemNotaTextBox").keypress(function (e) {
            ValidaQtdeDevItemNota();
        });
        $("#QtdeDevolucaoItemNotaTextBox").keydown(function (e) {
            // BackSpace
            if (e.keyCode == 8) {
                ValidaQtdeDevItemNota();
            }
        });
        function ValidaBtnSalvarItemNota() {
            $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
            var qtdeDev = $("#QtdeDevolucaoItemNotaTextBox").valid();
            var validaQtdeFatDev = ValidaQtdeFatDev();
            var motivo = $("#MotivoDevolucaoItemNotaDropDownList").valid();
            if (!motivo) {
                $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
            }
            else {
                $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            }
            var origem = $("#OrigemOcorrenciaItemNotaDropDownList").valid();
            if (!origem) {
                $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
            }
            else {
                $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            }
            if (qtdeDev && motivo && origem && validaQtdeFatDev) {
                $("#LabelErroAlterarItemNotaDialog").hide();
                return true;
            }
            else {
                $("#LabelErroAlterarItemNotaDialog").show();
                return false;
            }
        }
        function ValidaQtdeDevItemNota() {
            $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
            var qtdeDev = $("#QtdeDevolucaoItemNotaTextBox").valid();
            var classMotivo = document.getElementById('MotivoDevolucaoItemNotaDiv').className;
            var classOrigem = document.getElementById('OrigemOcorrenciaItemNotaDiv').className;
            var validaQtdeFatDev = ValidaQtdeFatDev();
            if (qtdeDev && classMotivo == "col-md-4" && classOrigem == "col-md-4" && validaQtdeFatDev) {
                $("#LabelErroAlterarItemNotaDialog").hide();
            }
            else {
                $("#LabelErroAlterarItemNotaDialog").show();
            }
        }
        function ValidaQtdeFatDev() {
            var valorQtdeDev = $("#QtdeDevolucaoItemNotaTextBox").val();
            if (valorQtdeDev == "") { valorQtdeDev == "0"; }
            alert(valorQtdeDev + " valorQtdeDev " + qtdeFaturadaItemNota + " qtdeFaturadaItemNota " + saldo + " saldo ")
            if (parseInt(valorQtdeDev) > parseInt(qtdeFaturadaItemNota - saldo)) {
                $("#FieldErrorQtdeDevFat").removeClass("field-validation-valid").addClass("field-validation-error");
                return false;
            }
            else {
                $("#FieldErrorQtdeDevFat").removeClass("field-validation-error").addClass("field-validation-valid");
                return true;
            }
        }
        function ValidaMotivoItemNota() {
            $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
            var motivo = $("#MotivoDevolucaoItemNotaDropDownList").valid();
            if (motivo) {
                $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
                var classQtdeDev = document.getElementById('QtdeDevolucaoItemNotaTextBox').className;
                var classOrigem = document.getElementById('OrigemOcorrenciaItemNotaDiv').className;
                var validaQtdeFatDev = ValidaQtdeFatDev();
                if ((classQtdeDev == "form-control input-sm valid" || classQtdeDev == "form-control input-sm") && classOrigem == "col-md-4" && validaQtdeFatDev) {
                    $("#LabelErroAlterarItemNotaDialog").hide();
                }
            }
            else {
                $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
                $("#LabelErroAlterarItemNotaDialog").show();
            }
            CarregaDropDownOrigemOcorrenciaItemNota();
        }
        function CarregaDropDownOrigemOcorrenciaItemNota() {
            var valorMotivo = $("#MotivoDevolucaoItemNotaDropDownList option:selected").val();
            if (valorMotivo != "0") {
               CarregaDropDownOrigemOcorrencia(valorMotivo, "OrigemOcorrenciaItemNotaDropDownList", "");
            }
            else {
                $("#OrigemOcorrenciaItemNotaDropDownList").empty();
                $("#OrigemOcorrenciaItemNotaDropDownList").append($('<option></option>').val("0").html("Selecione..."));
                document.getElementById('OrigemOcorrenciaItemNotaDropDownList').disabled = true;
            }
        }
        function ValidaOrigemItemNota() {
            $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
            var origem = $("#OrigemOcorrenciaItemNotaDropDownList").valid();
            if (origem) {
                $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
                var classQtdeDev = document.getElementById('QtdeDevolucaoItemNotaTextBox').className;
                var classMotivo = document.getElementById('MotivoDevolucaoItemNotaDiv').className;
                var validaQtdeFatDev = ValidaQtdeFatDev();
                if ((classQtdeDev == "form-control input-sm valid" || classQtdeDev == "form-control input-sm") && classMotivo == "col-md-4" && validaQtdeFatDev) {
                    $("#LabelErroAlterarItemNotaDialog").hide();
                }
            }
            else {
                $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
                $("#LabelErroAlterarItemNotaDialog").show();
            }
        }

        function CarregaDropDownMotivoOcorrencia(codigoOrigem, idDropDownOrigem, descricaoOrigem) {
            $.ajaxSetup({ cache: false });
            $("#" + idDropDownOrigem).empty();
            document.getElementById(idDropDownOrigem).disabled = false;
            $("#" + idDropDownOrigem).append($('<option></option>').val("0").html("Selecione..."));
            $.getJSON("@Url.Action("PesquisaMotivoporOrigem")", { codigoOrigem: codigoOrigem }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.lista) {
                    for (var i = 0; i < data.lista.length; i++) {
                        var codigo = data.lista[i].codigoMotivo;
                        var descricao = data.lista[i].descriçãoMotivo;
                        $("#" + idDropDownOrigem).append($('<option></option>').val(codigo).html(descricao));
                        if (descricaoOrigem == descricao) {
                            $('#OrigemOcorrenciaItemNotaDropDownList').val(codigo);
                        }
                    }
                }
                else {
                    document.getElementById(idDropDownOrigem).disabled = true;
                }
            });
        }

        function CarregaDropDownOrigemOcorrencia(codigoMotivo, idDropDownMotivo, descricaoOrigem) {
            $.ajaxSetup({ cache: false });
            $("#" + idDropDownMotivo).empty();
            document.getElementById(idDropDownMotivo).disabled = false;
            //$("#" + idDropDownMotivo).append($('<option></option>').val("0").html("Selecione..."));
            $.getJSON("@Url.Action("PesquisaOrigensPorMotivo")", { codigoMotivo: codigoMotivo }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    for (var i = 0; i < data.ListaOrigensMotivo.length; i++) {
                        var codigo = data.ListaOrigensMotivo[i].CodigoOrigem.toString()
                        var descricao = data.ListaOrigensMotivo[i].DescricaoOrigem;
                        $("#" + idDropDownMotivo).append($('<option></option>').val(codigo).html(descricao));
                        if (descricaoOrigem == descricao) {
                            $('#OrigemOcorrenciaItemNotaDropDownList').val(codigo);
                        }
                    }
                }
                else {
                    document.getElementById(idDropDownMotivo).disabled = true;
                }
            });
        }
        function ListaItensDevolucao() {
            var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
            var data = table.rows().data();
            var listaItensDev = new Array();
            for (var i = 0; i < data.length; i++) {
                var Empresa = data[i][0] + "&";
                var Filial = data[i][1] + "&";
                var Serie = data[i][2] + "&";
                var NumeroNota = data[i][3] + "&";
                var SeqNota = data[i][4] + "&";
                var Tns = data[i][5] + "&";
                var Produto = data[i][6] + "&";
                var Derivacao = data[i][7] + "&";
                var DescPro = data[i][8].replace(",", "!") + "&";
                var QtdeFat = data[i][9] + "&";
                var QtdeDev = data[i][10] + "&";
                var OrigemOcor = data[i][11] + "&";
                var MotivoDev = data[i][12] + "&";
                var PrecoUnit = data[i][13].replace(",", "!") + "&";
                var PercDescUni = data[i][14].replace(",", "!") + "&";
                var PercIpi = data[i][15].replace(",", "!") + "&";
                var ValorIpi = data[i][16].replace(",", "!") + "&";
                var valorLiquido = data[i][17].replace(",", "!") + "&";
                var valorSt = data[i][18].replace(",", "!") + "&";
                var departamento = data[i][19] + "&";
                var DtUltAlt = data[i][20] + "&";
                var UsuarioUltAlt = data[i][21] + "&";
                listaItensDev[i] = new Array(Empresa, Filial, Serie, NumeroNota, SeqNota, Tns, Produto, Derivacao, DescPro, QtdeFat, QtdeDev, OrigemOcor, MotivoDev, PrecoUnit, PercDescUni, PercIpi, ValorIpi, valorLiquido, valorSt, departamento, DtUltAlt, UsuarioUltAlt);
            }
            $('#ListaItensDevolucaoHidden').val(listaItensDev);
            document.forms[0].submit();
        }
        document.getElementById('OrigemOcorrenciaFase1DropDownList').disabled = true;
        function ValidaTipoAtendimentoFase1() {
            $("#TipoAtendimentoDropDownList").valid();
            tipAtend = $("#TipoAtendimentoDropDownList option:selected").val();
            if (tipAtend != "0") {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
                CarregaDropDownOrigemOcorrenciaFase1(tipAtend, "OrigemOcorrenciaFase1DropDownList");
                //  Reprovado

                if (tipAtend == "99") {
                    HabilitaRegistroReprovado(true);
                }
                else {
                    HabilitaRegistroReprovado(false);
                }
            }
            else {
                $("#TipoAtendimentoFase1Div").removeClass("col-md-4").addClass("col-md-4 has-error");
                $("#OrigemOcorrenciaFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
                $("#OrigemOcorrenciaFase1DropDownList").append($('<option></option>').val("1").html("Selecione..."));
                $("#OrigemOcorrenciaFase1DropDownList").prop('selectedIndex', 1);
                document.getElementById('OrigemOcorrenciaFase1DropDownList').disabled = true;
                $("#OrigemOcorrenciaFase1DropDownList").valid()
                $("#OrigemOcorrenciaFase1DropDownList").prop('selectedIndex', 0);
            }
        }
        // ========================= REGISTRO REPROVADO ==========================
        function HabilitaRegistroReprovado(habilita) {
            if (habilita) {
                $("#DivNumRegReprovado").show();
                $("#NumNotaSugTextBox").val("");
                $("#DescNumNotaSugTextBox").val("");
                document.getElementById('NumNotaSugTextBox').disabled = true;
                $("#CodClienteTextBox").val("");
                $("#NomeClienteTextBox").val("");
                $("#CodClienteTextBox").attr("readonly", true);
                $("#CodClienteTextBox").mask('remove');
                document.getElementById('PesquisarClienteButton').disabled = true;
                $("#CodMotoristaTextBox").val("");
                $("#NomeMotoristaTextBox").val("");
                $('#CodMotoristaTextBox').attr('readonly', true);
                $("#CodMotoristaTextBox").mask('remove');
                document.getElementById('PesquisarMotoristaButton').disabled = true;
                $("#CodPlacaTextBox").val("");
                $("#DescricaoPlacaTextBox").val("");
                $('#CodPlacaTextBox').attr('readonly', true);
                $("#CodPlacaTextBox").mask('remove');
                document.getElementById('PesquisarPlacaButton').disabled = true;
            }
            else {
                $("#DivNumRegReprovado").hide();
                $("#NumRegReprovadoTextBox").val("");
                $("#DescNumRegReprovadoTextBox").val("");
                document.getElementById('NumNotaSugTextBox').disabled = false;
                $('#CodClienteTextBox').attr('readonly', false);
                document.getElementById('PesquisarClienteButton').disabled = false;
                $('#CodMotoristaTextBox').attr('readonly', false);
                document.getElementById('PesquisarMotoristaButton').disabled = false;
                $('#CodPlacaTextBox').attr('readonly', false);
                document.getElementById('PesquisarPlacaButton').disabled = false;
                $('#CodClienteTextBox').mask("9?9999", { placeholder: "" });
                $('#CodMotoristaTextBox').mask("9?9999", { placeholder: "" });
                //$('#CodPlacaTextBox').mask("aaa-9999", { placeholder: "" });
            }
        }
        $("#NumRegReprovadoTextBox").focusin(function () {
            LimpaCamposRegistro();
        });
        function LimpaCamposRegistro() {
            $("#DescNumRegReprovadoTextBox").val("");
            $("#CodClienteTextBox").val("");
            $("#NomeClienteTextBox").val("");
            $("#CodMotoristaTextBox").val("");
            $("#NomeMotoristaTextBox").val("");
            $("#CodPlacaTextBox").val("");
            $("#DescricaoPlacaTextBox").val("");
        }
        $("#NumRegReprovadoTextBox").keypress(function (e) {
            // Enter
            if (e.keyCode == 13) {
                if ($("#NumRegReprovadoTextBox").valid()) {
                    $("#DescNumRegReprovadoTextBox").focus();
                    var situacao = '@(((int)NUTRIPLAN_WEB.MVC_4_BS.Model.Enums.SituacaoRegistroOcorrencia.Reprovado).ToString())';
                    PesquisaRegistrosOcorrenciaPorSituacao($("#NumRegReprovadoTextBox").val(), situacao);
                }
                return false;
            }
            else {
                $("#DescNumRegReprovadoTextBox").val("");
            }
        });
        function PesquisaRegistrosOcorrenciaPorSituacao(codigoRegistro, situacao) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisaRegistrosOcorrenciaPorSituacao")", { codigoRegistro: codigoRegistro, situacao: situacao }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.ListaN0203REGPesquisa.length > 0) {
                    $("#DescNumRegReprovadoTextBox").val("Data Hora Geração: " + data.ListaN0203REGPesquisa[0].DataHrGeracao);
                    $("#CodClienteTextBox").val(data.ListaN0203REGPesquisa[0].CodCliente);
                    $("#NomeClienteTextBox").val(data.ListaN0203REGPesquisa[0].NomeCliente);
                    $("#CodMotoristaTextBox").val(data.ListaN0203REGPesquisa[0].CodMotorista);
                    $("#NomeMotoristaTextBox").val(data.ListaN0203REGPesquisa[0].NomeMotorista);
                    $("#CodPlacaTextBox").val(data.ListaN0203REGPesquisa[0].CodPlaca);
                    $("#DescricaoPlacaTextBox").val(data.ListaN0203REGPesquisa[0].DescPlaca);
                    $("#CodClienteTextBox").valid();
                    $("#NomeClienteTextBox").valid();
                    $("#CodMotoristaTextBox").valid();
                    $("#NomeMotoristaTextBox").valid();
                    if (data.ListaN0203REGPesquisa[0].CodMotorista != 0) {
                        $("#CodPlacaTextBox").valid();
                        $("#DescricaoPlacaTextBox").valid();
                    }
                    else {
                        $("#CodPlacaTextBox").val(".");
                        $("#DescricaoPlacaTextBox").val(".");
                        $("#CodPlacaTextBox").valid();
                        $("#DescricaoPlacaTextBox").valid();
                        $("#CodPlacaTextBox").val("");
                        $("#DescricaoPlacaTextBox").val("");
                    }
                }
                else {
                    DialogPadrao("warning", "Aviso!", "warning", "O Número do Registro informado está com situação diferente de reprovado ou não existe.", "btnOkRegistroNaoEncontrado", "OK", true);
                }
                $('#progressBar').hide();
            });
        }
        function CarregaDropDownOrigemOcorrenciaFase1(codTipAtend, idDropDownMotivo) {
            $.ajaxSetup({ cache: false });
            $("#" + idDropDownMotivo).empty();
            document.getElementById(idDropDownMotivo).disabled = false;
            $("#" + idDropDownMotivo).append($('<option></option>').val("0").html("Selecione..."));
            $.getJSON("@Url.Action("PesquisaOrigemPorTipoAtend")", { codTipAtend: codTipAtend }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    for (var i = 0; i < data.listaTipoAtendOrigem.length; i++) {
                        var codigo = data.listaTipoAtendOrigem[i].Codigo;
                        var descricao = data.listaTipoAtendOrigem[i].Descricao;
                        $("#" + idDropDownMotivo).append($('<option></option>').val(codigo).html(descricao));
                    }
                }
                else {
                    document.getElementById(idDropDownMotivo).disabled = true;
                    DialogPadrao("warning", "Aviso!", "warning", "O Tipo de Atendimento Selecionado não possuí nenhuma Origem da Ocorrência atrelada.", "btnOkOrigemNaoEncontradaFase1", "OK", true);
                }
            });
        }
        function ValidaOrigemOcorrenciaFase1() {
            $("#OrigemOcorrenciaFase1DropDownList").valid();
            var oriOcorrencia = $("#OrigemOcorrenciaFase1DropDownList option:selected").val();
            if (oriOcorrencia != "0") {
                $("#OrigemOcorrenciaFase1Div").removeClass("col-md-4 has-error").addClass("col-md-4");
            }
            else {
                $("#OrigemOcorrenciaFase1Div").removeClass("col-md-4").addClass("col-md-4 has-error");
            }
        }
        // ====================================== PLACA =================================
        $("#PesquisarPlacaButton").click(function () {
            PesquisaTodasPlacas();
        });
        $('#TablePlaca').dataTable({
            "jQueryUI": true,
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "aoColumns": [
                        { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                        { "sClass": "left", "title": "Placa&nbsp;&nbsp;&nbsp" },
                        { "sClass": "left", "title": "Descrição&nbspdo&nbspCaminhão" + espaco + espaco.substring(0, 260) }, ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
        });
        function PesquisaUmaPlaca(codPlaca) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisarCaminhaoPorPlaca")", { codPlaca: codPlaca }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.listaCaminhao.length > 0) {
                    $("#CodPlacaTextBox").val(data.listaCaminhao[0].Placa);
                    $("#DescricaoPlacaTextBox").val(data.listaCaminhao[0].TipoCaminhao);
                    if ($("#NomeClienteTextBox").val() == "") {
                        $("#CodClienteTextBox").focus();
                    }
                    else if ($("#NomeMotoristaTextBox").val() == "") {
                        $("#CodMotoristaTextBox").focus();
                    }
                }
                else {
                    DialogPadrao("warning", "Aviso!", "warning", "Placa não encontrada.", "btnOkPlacaNaoEncontrada", "OK", true);
                }
                $('#progressBar').hide();
            });
        }
        function PesquisaTodasPlacas() {
            $('#progressBar').show();
            $("#gridTablePlaca").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisarCaminhaoPorPlaca")", { codPlaca: "" }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.listaCaminhao) {
                    var arrayRow = new Array();
                    $('#TablePlaca').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaCaminhao.length; i++) {
                        var placa = data.listaCaminhao[i].Placa;
                        var descricao = data.listaCaminhao[i].TipoCaminhao;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarPlaca('" + placa + "','" + descricao + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Placa'></span></a>";
                        arrayRow[i] = new Array(selecionar, placa, descricao);
                    }
                    $('#TablePlaca').dataTable().fnAddData(arrayRow);
                    $('#TablePlaca').dataTable().fnPageChange('first');
                    $("#gridTablePlaca").slideToggle('fast');
                }
                $('#progressBar').hide();
                $('#PlacaDialog').modal('show');
            });
        }
        function SelecionarPlaca(placa, descricao) {
            $('#CodPlacaTextBox').val(placa);
            $('#DescricaoPlacaTextBox').val(descricao);
            $("#CodPlacaTextBox").valid();
            $("#DescricaoPlacaTextBox").valid();
            $('#PlacaDialog').modal('hide');
            if ($("#NomeClienteTextBox").val() == "") {
                $("#CodClienteTextBox").focus();
            }
            else if ($("#NomeMotoristaTextBox").val() == "") {
                $("#CodMotoristaTextBox").focus();
            }
        }
        $("#CodPlacaTextBox").focusin(function () {
            $("#CodPlacaTextBox").rules("add", { required: true });
            $("#DescricaoPlacaTextBox").rules("add", { required: false });
            $("#DescricaoPlacaTextBox").val("");
            $("#DescricaoPlacaTextBox").valid();
        });
        $("#CodPlacaTextBox").keypress(function (e) {
            // Enter
            if (e.keyCode == 13) {
                $("#CodPlacaTextBox").val($("#CodPlacaTextBox").val().replace("-", ""));
                if ($("#CodPlacaTextBox").valid()) {
                    $("#DescricaoPlacaTextBox").focus();
                    PesquisaUmaPlaca($("#CodPlacaTextBox").val().replace("-", ""));
                }
                return false;
            }
        });
        $("#NumNotaSugTextBox").keypress(function (e) {
            // Enter
            if (e.keyCode == 13) {
                $("#NumNotaSugTextBox").rules("add", { required: true });
                if ($("#NumNotaSugTextBox").valid()) {
                    LimpaCamposPesquisaNota();
                    PesquisarDadosNota($("#NumNotaSugTextBox").val(), $("#TipoAtendimentoDropDownList option:selected").val());
                }
                return false;
            }
        });
        function LimpaCamposPesquisaNota() {
            $("#DescNumNotaSugTextBox").val("");
            $("#CodClienteTextBox").val("");
            $("#NomeClienteTextBox").val("");
            $("#CodMotoristaTextBox").val("");
            $("#NomeMotoristaTextBox").val("");
            $("#CodPlacaTextBox").val("");
            $("#DescricaoPlacaTextBox").val("");
        }
        function PesquisarDadosNota(codigoNota, tipAte) {
            if (ValidaTipoAtendimento()) {
                $('#progressBar').show();
                $.ajaxSetup({ cache: false });
                $.getJSON("@Url.Action("PesquisarDadosNota")", { codigoNota: codigoNota, tipAte: tipAte }, function (data) {
                    if (data.Logado || data.ErroExcecao) {
                        window.location.href = data.redirectUrl;
                        return;
                    }
                    else if (data.listaDadosNota.length > 0) {
                        $("#DescNumNotaSugTextBox").val("Emissão: " + data.listaDadosNota[0].DataEmissao);
                        $("#CodClienteTextBox").val(data.listaDadosNota[0].CodigoCliente);
                        PesquisaUmCliente(data.listaDadosNota[0].CodigoCliente);
                        if (data.listaDadosNota[0].CodigoMotorista != "0") {
                            $("#CodMotoristaTextBox").val(data.listaDadosNota[0].CodigoMotorista);
                            PesquisaUmMotorista(data.listaDadosNota[0].CodigoCliente);
                        }
                        if (data.listaDadosNota[0].PlacaVeiculo != "") {
                            $("#CodPlacaTextBox").val(data.listaDadosNota[0].PlacaVeiculo);
                            PesquisaUmaPlaca($("#CodPlacaTextBox").val().replace("-", ""));
                        }
                        setTimeout(function () {
                            $("#CodClienteTextBox").valid();
                            $("#NomeClienteTextBox").valid();
                            $("#CodMotoristaTextBox").valid();
                            $("#NomeMotoristaTextBox").valid();
                            $("#CodPlacaTextBox").valid();
                            $("#DescricaoPlacaTextBox").valid();
                            $("#DescNumNotaSugTextBox").focus();
                        }, 1500);
                    }
                    else {
                        if (data.mensagem != undefined) {
                            DialogPadrao("warning", "Aviso!", "warning", data.mensagem, "btnOkNotaNaoEncontrada", "OK", true);
                            $('#progressBar').hide();
                            return;
                        }
                        DialogPadrao("warning", "Aviso!", "warning", "Nota não encontrada, verifique se a mesma já está sendo usada em outra ocorrência ou se é de transportadora", "btnOkNotaNaoEncontrada", "OK", true);
                    }
                    $('#progressBar').hide();
                });
            }
        }
        function RelatorioMotivosDevolucao() {
            $('#progressBar').show();
            $.post("RelatorioMotivosDevolucao", {}, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else {
                    window.open(data);
                    $('#progressBar').hide();
                }
            }, "json");
        }
        $("#QtdeTotalTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true, precision: 0
        });
        $("#ValorBrutoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorLiquidoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorStTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#SuframaTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorIpiTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        function HabilitaMaskaraMoeda() {
            $("#QtdeTotalTextBox").focus();
            $("#ValorBrutoTextBox").focus();
            $("#ValorIpiTextBox").focus();
            $("#ValorStTextBox").focus();
            $("#SuframaTextBox").focus();
            $("#ValorLiquidoTextBox").focus();
            setTimeout(function () {
                scrollTo(0, 490);
            }, 10);
        }
        $('#liFase3').click(function () {
            HabilitaMaskaraMoedaDevolucao();
        });
        $("#QtdeTotalDevolucaoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true, precision: 0
        });
        $("#ValorTotalNotasTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorBrutoDevolucaoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorStDevolucaoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorLiquidoDevolucaoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorIpiDevolucaoTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        $("#ValorReceberTextBox").maskMoney({
            showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
        });
        function HabilitaMaskaraMoedaDevolucao() {
            setTimeout(function () {
                $("#QtdeTotalDevolucaoTextBox").focus();
                $("#ValorTotalNotasTextBox").focus();
                $("#ValorBrutoDevolucaoTextBox").focus();
                $("#ValorStDevolucaoTextBox").focus();
                $("#ValorLiquidoDevolucaoTextBox").focus();
                $("#ValorIpiDevolucaoTextBox").focus();
                $("#ValorReceberTextBox").focus();
                $("#btnOkDialogItensExcSucesso").focus();
                scrollTo(0, 0);
            }, 250);
        }
        // Muda Url da Página sem dar REFRESH
        $('.dataTables_scrollHead').removeAttr('style');
        $('.dataTables_scrollHead').attr('style', 'overflow: hidden', 'width: 100%;');
    </script>
}
<h4>
    <ul class="breadcrumb" style="margin-bottom: 5px;">
        <li><a href="@Url.Content("~/PaginaInicial/Index")">Solicitações</a></li>
        <li class="active">@ViewBag.Title</li>
    </ul>
</h4>
<div class="progress progress-striped active" style="display: none;" id="progressBar">
    <div class="progress-bar" style="width: 100%">
    </div>
</div>
<div class="modal" id="DialogPadrao" data-backdrop="static"></div>
<div class="modal fade bs-example-modal-lg" id="ClienteDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharClienteDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Cliente</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTableCliente" style="display: none;">
                        <table id="TableCliente" class="display compact" cellspacing="0" width="99.9%"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" id="TransporteDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharClienteDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Transportadora</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTableTransporte" style="display: none;">
                        <table id="TableTransporte" class="display compact" cellspacing="0"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" id="MotoristaDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharMotoristaDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Motorista</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTableMotorista" style="display: none;">
                        <table id="TableMotorista" class="display compact" cellspacing="0" width="99.9%"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade bs-example-modal-lg" id="PlacaDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharPlacaDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Placa</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTablePlaca" style="display: none;">
                        <table id="TablePlaca" class="display compact" cellspacing="0" width="99.9%"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("Cadastrar", "Solicitacoes", FormMethod.Post, new { @class = "form-horizontal", id = "CadastrarRegistroOcorrenciasForm", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary(true)
    <div class="modal" id="AlterarItemNotaDialog" data-backdrop="static" style="display: none;">
        <div class="modal-dialog">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title"></h3>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-dismissable alert-danger" id="LabelErroAlterarItemNotaDialog">
                                @Html.ValidationMessageFor(m => m.QtdeDevolucaoItemNota, string.Empty, new { id = "FieldErrorQtdeDev" })
                                <span id="FieldErrorQtdeDevFat" class="field-validation-valid"><span class="">A Quantidade de Devolução não pode ser maior que a quantidade faturada e o item deve ter saldo.<br></span></span>
                                @Html.ValidationMessageFor(m => m.MotivoDevolucaoItemNota, string.Empty, new { id = "FieldErrorMotivoDevolucaoItemNota" })
                                @Html.ValidationMessageFor(m => m.OrigemOcorrenciaItemNota, string.Empty, new { id = "FieldErrorOrigemOcorrenciaItemNota" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        @Html.LabelFor(m => m.QtdeDevolucaoItemNota, new { @class = "col-md-4 control-label" })
                        @Html.LabelFor(m => m.MotivoDevolucaoItemNota, new { @class = "col-md-4 control-label" })
                        @Html.LabelFor(m => m.OrigemOcorrenciaItemNota, new { @class = "col-md-4 control-label" })
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.QtdeDevolucaoItemNota, new { @class = "form-control input-sm", @id = "QtdeDevolucaoItemNotaTextBox" })
                        </div>
                        <div class="col-md-4" id="MotivoDevolucaoItemNotaDiv">
                            @Html.DropDownListFor(m => m.MotivoDevolucaoItemNota, new SelectList(Model.ListaMotivoDevolucao.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "MotivoDevolucaoItemNotaDropDownList", @onchange = "ValidaMotivoItemNota();" })
                        </div>
                        <div class="col-md-4" id="OrigemOcorrenciaItemNotaDiv">
                            @Html.DropDownListFor(m => m.OrigemOcorrenciaItemNota, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaItemNotaDropDownList", @onchange = "ValidaOrigemItemNota();" })
                        </div>
                    </div>
                    <p></p>
                    <div class="row">
                        <div style="text-align:center">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                            <button type="button" id="SalvarAlteracaoBtn" class="btn btn-primary" style="margin-top:0px">Salvar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <ul class="nav nav-tabs" style="margin-bottom: 15px;">
        <li id="liFase1" class="active"><a id="HrefFase1" href="#fase1" data-toggle="tab">Fase 1</a></li>
        <li id="liFase2"><a id="HrefFase2">Fase 2</a></li>
        <li id="liFase3" class="disabled"><a id="HrefFase3">Fase 3</a></li>
        <li id="liFase4" class="disabled"><a id="HrefFase4">Fase 4</a></li>
        <li>
            <button type="button" id="CancelarButton" style="margin-right:0px; margin-top:6px" class="btn btn-primary btn-sm">Cancelar</button>
        </li>
        <li><button type="button" id="PesquisarButton" style="margin-left:2px; margin-top:6px" class="btn btn-primary btn-sm">Pesquisar - Rascunho</button></li>
    </ul>
    <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="fase1">
            <div class="panel panel-default">
                <p></p>
                <div class="form-group" id="panelFase1">
                    @Html.LabelFor(m => m.TipoAtendimento, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5" id="TipoAtendimentoFase1Div">
                        @Html.DropDownListFor(m => m.TipoAtendimento, new SelectList(Model.ListaTipoAtendimento.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "TipoAtendimentoDropDownList", @onchange = "ValidaTipoAtendimentoFase1()" })
                        @Html.ValidationMessageFor(m => m.TipoAtendimento)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigemOcorrencia, new { @class = "col-md-2 control-label" })
                    <div id="OrigemOcorrenciaFase1Div" class="col-md-5">
                        @Html.DropDownListFor(m => m.OrigemOcorrencia, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaFase1DropDownList", @onchange = "ValidaOrigemOcorrenciaFase1()" })
                        @Html.ValidationMessageFor(m => m.OrigemOcorrencia)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NumNotaSug, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.NumNotaSug, new { @class = "form-control input-sm", @id = "NumNotaSugTextBox" })
                            <span class="input-group-btn">
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.DescNumNotaSug, new { @class = "form-control input-sm", @id = "DescNumNotaSugTextBox", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.NumNotaSug)
                    </div>
                </div>
                <div class="form-group" id="DivNumRegReprovado" style="display:none">
                    @Html.LabelFor(m => m.NumRegReprovado, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.NumRegReprovado, new { @class = "form-control input-sm", @id = "NumRegReprovadoTextBox" })
                            <span class="input-group-btn">
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.DescNumRegReprovado, new { @class = "form-control input-sm", @id = "DescNumRegReprovadoTextBox", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.NumRegReprovado)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodCliente, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CodCliente, new { @class = "form-control input-sm", @id = "CodClienteTextBox" })
                            <span class="input-group-addon" style="padding: 3px 10px">
                                <a style='color:#333333' href="#" id="PesquisarClienteButton"><span class="glyphicon glyphicon-search" title="Pesquisar cliente"></span></a>
                            </span>

                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeCliente, new { @class = "form-control input-sm", @id = "NomeClienteTextBox", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.NomeCliente)
                        @Html.ValidationMessageFor(m => m.CodCliente)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodMotorista, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CodMotorista, new { @class = "form-control input-sm", @id = "CodMotoristaTextBox" })
                            <span class="input-group-addon" style="padding: 3px 10px">
                                <a style='color:#333333' href="#" id="PesquisarMotoristaButton"><span class="glyphicon glyphicon-search" title="Pesquisar motorista"></span></a>
                            </span>

                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeMotorista, new { @class = "form-control input-sm", @id = "NomeMotoristaTextBox", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.NomeMotorista)
                        @Html.ValidationMessageFor(m => m.CodMotorista)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodPlaca, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CodPlaca, new { @class = "form-control input-sm", @id = "CodPlacaTextBox", @style = "text-transform: uppercase" })
                            <span class="input-group-addon" style="padding: 3px 10px">
                                <a style='color:#333333' href="#" id="PesquisarPlacaButton"><span class="glyphicon glyphicon-search" title="Pesquisar placa"></span></a>
                            </span>

                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.DescricaoPlaca, new { @class = "form-control input-sm", @id = "DescricaoPlacaTextBox", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.DescricaoPlaca)
                        @Html.ValidationMessageFor(m => m.CodPlaca)
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase2">
            <div class="panel panel-default" id="DivPanelFase2" style="display: none;">
                <legend>&nbsp;&nbsp;Dados Gerais de Notas Fiscais de Saída</legend>
                <div id="gridTableNotasFiscaisSaida" style="display: none;">
                    <table id="TableNotasFiscaisSaida" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th class="disabled" style="text-align:center">Carregar</th>
                                <th>Empresa</th>
                                <th>Filial</th>
                                <th>Série</th>
                                <th>Nº&nbsp;NF</th>
                                <th>Emissão</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Situação</th>
                                <th>Tipo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Cod.&nbsp;Cliente</th>
                                <th>Nome&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>TNS</th>
                                <th>Descrição&nbsp;TNS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Cod.&nbsp;Transportadora</th>
                                <th>Ind.&nbsp;Situação&nbsp;Conferência</th>
                                <th>Dias&nbsp;Faturamento</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="panel panel-default" style="display: none;" id="DivItensNotasFiscaisSaida">
                <legend>&nbsp;&nbsp;Itens da Nota Fiscal de Saída Selecionada</legend>
                <!--Origem da Ocorrência-->
                <!--cleverson-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Serie, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Serie, new { @class = "form-control input-sm", @id = "SerieTextBox", @ViewBag.Disabled })
                    </div>
                    @Html.LabelFor(m => m.NumNotaFiscal, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.NumNotaFiscal, new { @class = "form-control input-sm", @id = "NumNotaFiscalTextBox", @ViewBag.Disabled })
                    </div>
                    <div class="col-lg-6">
                        @Html.LabelFor(m => m.OrigemOcorrenciaFase2, new { @class = "col-md-6 control-label" })
                        <div class="col-md-6">
                            @Html.DropDownListFor(m => m.OrigemOcorrenciaFase2, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.OrigemOcorrenciaFase2), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaFase2DropDownList", @onchange = "MudarOrigemOcorrencia()" })
                        </div>
                    </div>
                </div>

                <!--Motivo da Ocorrência-->
                <div class="form-group">
                    @Html.LabelFor(m => m.Empresa, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Empresa, new { @class = "form-control input-sm", @id = "EmpresaTextBox", @ViewBag.Disabled })
                    </div>
                    @Html.LabelFor(m => m.Filial, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Filial, new { @class = "form-control input-sm", @id = "FilialTextBox", @ViewBag.Disabled })
                    </div>
                    <div class="col-lg-6">
                        @Html.LabelFor(m => m.MotivoDevolucao, new { @class = "col-md-6 control-label" })
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon" style="padding: 3px 6px">
                                    <a style='color:#333333' href="#" onclick="RelatorioMotivosDevolucao()"><span class="glyphicon glyphicon-question-sign" title="Ajuda"></span></a>
                                </span>
                                @Html.DropDownListFor(m => m.MotivoDevolucao, new SelectList(Model.ListaMotivoDevolucao.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.MotivoDevolucao), new { @class = "form-control input-sm", @id = "MotivoDevolucaoFase2DropDownList", @onchange = "MudarMotivoDevolucao()" })
                            </div>
                        </div>
                    </div>
                </div>
                <div id="gridTableItensNotasFiscaisSaida">
                    <table id="TableItensNotasFiscaisSaida" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th class="disabled" style="text-align:center">Sel.</th>
                                <th>Seq.</th>
                                <th>TNS</th>
                                <th>Código&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Descrição&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Qtde&nbsp;Faturada</th>
                                <th>Qtde&nbsp;Devolução</th>
                                <th>Preço&nbsp;Unitário</th>
                                <th>Motivo&nbsp;de&nbsp;Devolução&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Origem&nbsp;Ocorrência</th>
                                <th>%&nbsp;Desc.UN</th>
                                <th>%&nbsp;IPI&nbsp;&nbsp;</th>
                                <th>Valor&nbsp;IPI</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Valor&nbsp;ST</th>
                                <th>Dep.</th>
                                <th>Frete</th>
                                <th>Suframa</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(m => m.QtdeTotal, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.QtdeTotal, new { @class = "form-control input-sm", @id = "QtdeTotalTextBox", @readOnly = true })
                    </div>
                    @Html.LabelFor(m => m.ValorIpi, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.ValorIpi, new { @class = "form-control input-sm", @id = "ValorIpiTextBox", @readOnly = true })
                    </div>
                    <div class="col-lg-6">
                        <label class="col-md-6 control-label">Itens Selecionados ? </label>
                        <div class="col-md-5">
                            <button class="btn btn-default btn-sm" type="button" id="AdicionarItenButton">Adicionar Itens</button>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorBruto, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.ValorBruto, new { @class = "form-control input-sm", @id = "ValorBrutoTextBox", @readOnly = true })
                    </div>
                    @Html.LabelFor(m => m.ValorSt, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.ValorSt, new { @class = "form-control input-sm", @id = "ValorStTextBox", @readOnly = true })
                    </div>
                    @Html.LabelFor(m => m.DescontoSuframa, new { @class = "col-md-1 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.DescontoSuframa, new { @class = "form-control input-sm", @id = "SuframaTextBox", @readOnly = true })
                    </div>
                    @Html.LabelFor(m => m.ValorLiquido, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.ValorLiquido, new { @class = "form-control input-sm", @id = "ValorLiquidoTextBox", @readOnly = true })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase3">
            <div class="panel panel-default" id="DivPanelFase3" style="display: none;">
                <legend>&nbsp;&nbsp;Itens de Notas Fiscais Selecionadas para Devolução</legend>
                <div id="gridTableItensNotasFiscaisDevolucao">
                    <table id="TableItensNotasFiscaisDevolucao" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th>Emp.</th>
                                <th>Fil.</th>
                                <th>Série</th>
                                <th>Nº&nbsp;NF</th>
                                <th>Seq</th>
                                <th>TNS</th>
                                <th>Prod.</th>
                                <th>Der.</th>
                                <th>Descrição&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Qtde.&nbsp;Fat.</th>
                                <th>Qtde.&nbsp;Dev.</th>
                                <th>Origem&nbsp;Ocorrência</th>
                                <th>Motivo&nbsp;de&nbsp;Devolução&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Preço&nbsp;Unitário</th>
                                <th>%&nbsp;Desc.UN</th>
                                <th>%&nbsp;&nbsp;IPI</th>
                                <th>Valor&nbsp;IPI</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Valor&nbsp;ST</th>
                                <th>Dep.</th>
                                <th>Data&nbsp;Última&nbsp;Alteração</th>
                                <th>Usuário&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Suframa</th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(m => m.QtdeTotalDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.QtdeTotalDevolucao, new { @class = "form-control input-sm", @id = "QtdeTotalDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorTotalNotas, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorTotalNotas, new { @class = "form-control input-sm", @id = "ValorTotalNotasTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorBrutoDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorBrutoDevolucao, new { @class = "form-control input-sm", @id = "ValorBrutoDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorStDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorStDevolucao, new { @class = "form-control input-sm", @id = "ValorStDevolucaoTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorIpiDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorIpiDevolucao, new { @class = "form-control input-sm", @id = "ValorIpiDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorLiquidoDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorLiquidoDevolucao, new { @class = "form-control input-sm", @id = "ValorLiquidoDevolucaoTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label"></label>
                    <div class="col-md-2">
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorReceber, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorReceber, new { @class = "form-control input-sm", @id = "ValorReceberTextBox", @readOnly = true })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase4">
            <div class="panel panel-default" id="DivPanelFase4" style="display: block;">
                <legend>&nbsp;&nbsp;Digite as observações abaixo</legend>

                <div id="ConferenciaItem" class="form-group">
                    <p></p>
                    @Html.LabelFor(m => m.CodTra, new { @class = "col-md-1 control-label" })
                    <div class="col-md-1">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CodTra, new { @class = "form-control input-smgroup", @id = "CodigoClienteConferenciaItem" })
                            <span class="input-group-addon" style="padding: 3px 10px">
                                <a style='color:#333333' href="#" id="PesquisarClienteButtonItens"><span class="glyphicon glyphicon-search" title="Pesquisar Transportadora"></span></a>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeTra, new { @class = "form-control input-smgroup", @id = "NomeclienteConferenciaItem", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.CodTra)
                        @Html.ValidationMessageFor(m => m.NomeTra)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Observacoes, new { @class = "col-md-1 control-label" })
                    <div class="col-lg-10-2" id="ObservacoesDiv">
                        @Html.TextAreaFor(m => m.Observacoes, new { @class = "form-control", @id = "ObservacoesTextBox", @style = "max-width:100%", @rows = "6", onKeyPress = "return ( this.value.length < 400 );" })
                        @Html.ValidationMessageFor(m => m.Observacoes)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AnexoArquivo, new { @class = "col-md-1 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.AnexoArquivo, new { type = "file", @class = "form-control", @multiple = true, @id = "AnexosTextBox" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-1 control-label">
                    </div>
                    <span class="input-group-btn">
                        <div class="col-lg-1">
                            <button type="button" id="RascunhoButton" class="btn btn-primary btn-sm">Rascunho</button>
                        </div>
                        <div class="col-lg-1">
                            <button type="button" id="FinalizarButton" class="btn btn-primary btn-sm">Finalizar</button>
                        </div>
                    </span>
                </div>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.ListaItensDevolucao, new { @id = "ListaItensDevolucaoHidden" })
    @Html.HiddenFor(m => m.Acao, new { @id = "AcaoHidden" })
    @Html.HiddenFor(m => m.CodCliente, new { @id = "CodClienteHidden" })
}