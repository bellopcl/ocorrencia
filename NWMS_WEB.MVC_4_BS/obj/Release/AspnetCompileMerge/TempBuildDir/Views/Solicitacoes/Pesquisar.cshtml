﻿@model NWORKFLOW_WEB.MVC_4_BS.Models.PesqLancRegistroOcorrenciaViewModel
@{
    ViewBag.Title = "Lançamento de Registro de Ocorrência";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts{
    @Scripts.Render("~/bundles/maskMoney")
    <script type="text/javascript">
        var espaco = "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"

    $("#PesquisarRegistroBtn").click(function () {
        PesquisaTodosRegistros();
    });
    $("#NumRegistroTextBox").keypress(function (e) {
        // Enter
        if (e.keyCode == 13) {
            if ($("#NumRegistroTextBox").valid()) {
                document.getElementById('NumRegistroTextBox').disabled = true;
                var codigoRegistro = $("#NumRegistroTextBox").val();
                PesquisaUmRegistro(codigoRegistro);
            }
            return false;
        }
        else {
            LimpaCamposRegistro();
        }
    });
    $("#NumRegistroTextBox").keydown(function (e) {
        // BackSpace
        if (e.keyCode == 8) {
            LimpaCamposRegistro();
        }
    });
    
    function LimpaCamposRegistro() {
        $("#TipoAtendimentoDropDownList").prop('selectedIndex', 0);
        $("#OrigemOcorrenciaFase1DropDownList").prop('selectedIndex', 0);
        $("#CodClienteTextBox").val("");
        $("#NomeClienteTextBox").val("");
        $("#CodMotoristaTextBox").val("");
        $("#NomeMotoristaTextBox").val("");
        $("#CodPlacaTextBox").val("");
        $("#DescricaoPlacaTextBox").val("");
        $("#DataHoraGeracaoTextBox").val("");
        $("#UsuarioGeracaoTextBox").val("");
        $("#SituacaoRegistroTextBox").val("");
        $("#UltimaAlteracaoTextBox").val("");
        $("#UsuarioUltimaAlteracaoTextBox").val("");
    }
    function DesabilitaFase1() {
        $("#HrefFase1").removeAttrs("href");
        $("#HrefFase1").removeAttrs("data-toggle");
        $("#liFase1").addClass("disabled");
    }
    function DesabilitaFase2() {
        $("#HrefFase2").removeAttrs("href");
        $("#HrefFase2").removeAttrs("data-toggle");
        $("#liFase2").removeClass("active").addClass("disabled");
        $("#fase2").removeClass("tab-pane fade active in").addClass("tab-pane fade");
    }
    function HabilitaFase1() {
        $("#HrefFase1").attr("href", "#fase1");
        $("#HrefFase1").attr("data-toggle", "tab");
        $("#liFase1").removeClass("disabled").addClass("active");
        $("#fase1").removeClass("tab-pane fade").removeClass("tab-pane fade in").addClass("tab-pane fade active in");
    }
    function HabilitaFase2() {
        $("#HrefFase2").attr("href", "#fase2");
        $("#HrefFase2").attr("data-toggle", "tab");
        $("#liFase2").removeClass("disabled");
    }
    function HabilitaFase34() {
        $("#HrefFase3").attr("href", "#fase3");
        $("#HrefFase3").attr("data-toggle", "tab");
        $("#liFase3").removeClass("disabled");
        $("#HrefFase4").attr("href", "#fase4");
        $("#HrefFase4").attr("data-toggle", "tab");
        $("#liFase4").removeClass("disabled");
        }

    $('#TableTransporte').dataTable({
            "jQueryUI": true,
            "sPaginationType": "full_numbers",
            "iDisplayLength": 10,
            "iDisplayStart": 1,
            "paging": true,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "aoColumns": [
                        { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                        { "sClass": "left", "title": "Cód." },
                        { "sClass": "left", "title": "Nome&nbspFantasia" + espaco },
                        { "sClass": "left", "title": "Razão&nbspSocial" + espaco },],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollX": true,
    });

    function PesquisarTransportador() {
            //var ocorrencia = $("#NumRegistroTextBox").val();
            var ocorrencia = $("#NumNotaFiscalTextBox").val();
            $('#progressBar').show();
            $("#gridTableTransporte").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("ConsultarTransportadora", "Aprovacoes")", { ocorrencia: ocorrencia, tipo: "T" }, function (data) {
                if (data.listaTransportador) {
                    var arrayRow = new Array();
                    $('#TableTransporte').dataTable().fnClearTable();
                    var array = 0;
                    if (data.listaTransportador.CODTRA > 1) {
                        var codigo = data.listaTransportador.CODTRA;
                        var nome = data.listaTransportador.NOMTRA;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarTransporte('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Cliente'></span></a>";
                        var razaoSocial = data.listaTransportador.APETRA;
                        arrayRow[array] = new Array(selecionar, codigo, nome, razaoSocial);
                        array = 1;
                    }
                    if (data.listaTransportador.CODRED != "0") {
                        var codigo = data.listaTransportador.CODRED;
                        var nome = data.listaTransportador.NOMETRAREDES;
                        var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarTransporte('" + codigo + "','" + nome + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Cliente'></span></a>";
                        var razaoSocial = data.listaTransportador.CODREDAPETRA;
                        arrayRow[array] = new Array(selecionar, codigo, nome, razaoSocial);
                    }
                    $('#TableTransporte').dataTable().fnAddData(arrayRow);
                    $('#TableTransporte').dataTable().fnPageChange('first');
                    $("#gridTableTransporte").slideToggle('fast');
                }
                $('#progressBar').hide();
                $('#TransporteDialog').modal('show');
            });
        }

        $("#PesquisarClienteButtonItens").click(function () {
            PesquisarTransportador();
        });

        function SelecionarTransporte(codigo, nome) {
            $("#CodigoClienteConferenciaItem").val("");
            $("#CodigoClienteConferenciaItem").focus();
            $("#TransporteDialog").modal("hide");
            setTimeout(function () {
                $("#CodigoClienteConferenciaItem").val(codigo);
                $("#NomeclienteConferenciaItem").val(nome);
                $("#CodigoClienteConferenciaItem").focus();
            }, 50);
        }

    // Desabilita botao pesquisar e o campo num registro
    $('#liFase2').click(function () {
        var tamanho = $('#TableNotasFiscaisSaida').DataTable().rows().data().length;
        //var classe = document.getElementById('liFase2');
        //if (classe != "active") {
        if (tamanho == 0) {
            if ($("#NumRegistroTextBox").valid() && $("#CodClienteTextBox").val() == "") {
                DialogPadrao("warning", "Aviso!", "warning", "O Nº do Registro deve ser pesquisado.", "btnOkNumRegistroNaoPesqErro", "OK", true);
                DesabilitaFase2();
            }
            else if ($("#NumRegistroTextBox").valid()) {
                document.getElementById('NumRegistroTextBox').disabled = true;
                $("#PesquisarRegistroBtn").addClass("disabled");
                var codigoCliente = $('#CodClienteTextBox').val();
                var codigoMotorista = $('#CodMotoristaTextBox').val();
                var codPlaca = $('#CodPlacaTextBox').val();
                var tipoAtendimento = $('#TipoAtendimentoDropDownList').val();
                PesquisarNotasFiscaisSaida(codigoCliente, codigoMotorista, codPlaca, tipoAtendimento);
                setTimeout(function () {
                    var tamanho = $('#TableNotasFiscaisSaida').DataTable().rows().data().length;
                    if (tamanho == 0) {
                        document.getElementById('NumRegistroTextBox').disabled = false;
                        $("#PesquisarRegistroBtn").removeClass("disabled").addClass("btn btn-default btn-sm");
                        DesabilitaFase2();
                        HabilitaFase1();
                        HabilitaFase2();
                    }
                }, 1000);
            }
            else {
                DesabilitaFase2();
                //HabilitaFase1();
            }
        }
    });
    var espaco = "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"
    $('#TableRegistro').dataTable({
        "jQueryUI": true,
        "sPaginationType": "full_numbers",
        "iDisplayLength": 10,
        "iDisplayStart": 1,
        //"ordering": false,
        //"info": false,
        "paging": true,
        "bSort": true,
        "bFilter": true,
        "Info": true,
        "bLengthChange": false,
        "order": [[1, "asc"]],
        "aoColumns": [
                    { "sClass": "center", "title": "Sel.", "bSortable": false, "bSearchable": false },
                    { "sClass": "center", "title": "Reg." },
                    { "sClass": "center", "title": "Tipo&nbspde&nbspAtendimento" + espaco.substring(0, 150) },
                    { "sClass": "center", "title": "Origem&nbspda&nbspOcorrência" + espaco.substring(0, 30) },
                    { "sClass": "center", "title": "Cliente" },
                    { "sClass": "center", "title": "Nome" + espaco },
                    { "sClass": "right", "title": "CNPJ/CPF" + espaco.substring(0, 55) },
                    { "sClass": "right", "title": "Inscrição&nbspEstadual" },
                    { "sClass": "center", "title": "Motorista" },
                    { "sClass": "center", "title": "Nome" + espaco.substring(0, 280) },
                    { "sClass": "center", "title": "Placa&nbsp;&nbsp;&nbsp;&nbsp" },
                    { "sClass": "center", "title": "Descrição&nbspdo&nbspCaminhão" + espaco.substring(0, 280) },
                    { "sClass": "center", "title": "Data&nbspGeração" + espaco.substring(0, 55) },
                    { "sClass": "center", "title": "Usuário&nbspGeração" + espaco.substring(0, 200) },
                    { "sClass": "center", "title": "Situação&nbspReg." },
                    { "sClass": "center", "title": "Última&nbspAlteração" + espaco.substring(0, 55) },
                    { "sClass": "center", "title": "Usuário&nbspÚltima&nbspAlteração" + espaco.substring(0, 200) }, ],
        "oLanguage": {
            "sLengthMenu": "Mostrando _MENU_ registros por página",
            "sSearch": "Pesquisar:",
            "sZeroRecords": "Nenhum registro encontrado",
            "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
            "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
            "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
            "oPaginate": {
                "sFirst": "Primeiro",
                "sPrevious": "«&nbspAnterior",
                "sNext": "Próximo&nbsp»",
                "sLast": "Último"
            }
        },
        //"scrollY": 380,
        "scrollX": true,
    });

    function PesquisaUmRegistro(codigoRegistro) {
        $('#progressBar').show();
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("PesquisarRegistro")", { codigoRegistro: codigoRegistro }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.PesquisaUmRegistro) {
                if (data.ListaN0203REGPesquisa.length > 0) {
                    $('#TipoAtendimentoDropDownList').val(data.ListaN0203REGPesquisa[0].CodTipoAtendimento);
                    $('#OrigemOcorrenciaFase1DropDownList').val(data.ListaN0203REGPesquisa[0].CodOrigemOcorrencia);
                    $("#CodClienteTextBox").val(data.ListaN0203REGPesquisa[0].CodCliente);
                    $("#NomeClienteTextBox").val(data.ListaN0203REGPesquisa[0].NomeCliente);
                    $("#CodMotoristaTextBox").val(data.ListaN0203REGPesquisa[0].CodMotorista);
                    $("#NomeMotoristaTextBox").val(data.ListaN0203REGPesquisa[0].NomeMotorista);
                    $("#CodPlacaTextBox").val(data.ListaN0203REGPesquisa[0].CodPlaca);
                    $("#DescricaoPlacaTextBox").val(data.ListaN0203REGPesquisa[0].DescPlaca);
                    $("#DataHoraGeracaoTextBox").val(data.ListaN0203REGPesquisa[0].DataHrGeracao);
                    $("#UsuarioGeracaoTextBox").val(data.ListaN0203REGPesquisa[0].UsuarioGeracao + " - " + data.ListaN0203REGPesquisa[0].NomeUsuarioGeracao);
                    ValidaSituacaoReprovado(data.ListaN0203REGPesquisa[0].CodSituacaoRegistro);
                    $("#SituacaoRegistroTextBox").val(data.ListaN0203REGPesquisa[0].CodSituacaoRegistro + " - " + data.ListaN0203REGPesquisa[0].DescSituacaoRegistro);
                    $("#UltimaAlteracaoTextBox").val(data.ListaN0203REGPesquisa[0].UltimaAlteracao);
                    $("#UsuarioUltimaAlteracaoTextBox").val(data.ListaN0203REGPesquisa[0].UsuarioUltimaAlteracao + " - " + data.ListaN0203REGPesquisa[0].NomeUsuarioUltimaAlteracao);
                    $("#ObservacoesTextBox").val(data.ListaN0203REGPesquisa[0].Observacao);
                    $("#CodigoClienteConferenciaItem").val(data.ListaN0203REGPesquisa[0].CodTra);
                    DescTransportadora(data.ListaN0203REGPesquisa[0].CodTra)
                    HabilitaFase2();
                    document.getElementById('NumRegistroTextBox').disabled = false;
                    $('#NumRegistroTextBox').focus();
                }
                else {
                    document.getElementById('NumRegistroTextBox').disabled = false;
                    DialogPadrao("warning", "Aviso!", "warning", "Registro não encontrado.", "btnOkRegistroNaoEncontrado", "OK", true);
                    DesabilitaFase2();
                }
            }
            $('#progressBar').hide();
        });
    }
    function DescTransportadora(DescTransportadora) {
        $.getJSON("@Url.Action("descTransportadoraIndenizacao")", { CodTra: DescTransportadora }, function (data) {
             $("#NomeclienteConferenciaItem").val(data.DescTransportadora);
         });
     }
    function ValidaSituacaoReprovado(sit) {
        var situacao = '@(((int)NUTRIPLAN_WEB.MVC_4_BS.Model.Enums.SituacaoRegistroOcorrencia.Reprovado).ToString())';
        if (sit == situacao) {
            document.getElementById('RascunhoButton').disabled = true;
        }
        else {
            document.getElementById('RascunhoButton').disabled = false;
        }
    }
    function PesquisaTodosRegistros() {
        $('#progressBar').show();
        $("#gridTableRegistro").hide();
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("PesquisarRegistro")", { codigoRegistro: "" }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.PesquisaTodosRegistros && data.ListaN0203REGPesquisa.length > 0) {
                var arrayRow = new Array();
                $('#RegistroDialog').modal('show');
                $('#TableRegistro').dataTable().fnClearTable();
                for (var i = 0; i < data.ListaN0203REGPesquisa.length; i++) {
                    var registro = data.ListaN0203REGPesquisa[i].CodigoRegistro;
                    var tipoAtendimento = data.ListaN0203REGPesquisa[i].DescTipoAtendimento;
                    var origemOcorrencia = data.ListaN0203REGPesquisa[i].DescOrigemOcorrencia;
                    var codigoCliente = data.ListaN0203REGPesquisa[i].CodCliente;
                    var nomeCliente = data.ListaN0203REGPesquisa[i].NomeCliente;
                    var cpfCnpj = data.ListaN0203REGPesquisa[i].CnpjCliente;
                    var ie = data.ListaN0203REGPesquisa[i].InscricaoEstadualCliente;
                    var codigoMotorista = data.ListaN0203REGPesquisa[i].CodMotorista;
                    var nomeMotorista = data.ListaN0203REGPesquisa[i].NomeMotorista;
                    var codPlaca = data.ListaN0203REGPesquisa[i].CodPlaca;
                    var descPlaca = data.ListaN0203REGPesquisa[i].DescPlaca;
                    var dtHrGer = data.ListaN0203REGPesquisa[i].DataHrGeracao;
                    var userGer = data.ListaN0203REGPesquisa[i].UsuarioGeracao + " - " + data.ListaN0203REGPesquisa[i].NomeUsuarioGeracao;
                    var sitRegistro = data.ListaN0203REGPesquisa[i].CodSituacaoRegistro + " - " + data.ListaN0203REGPesquisa[i].DescSituacaoRegistro;
                    var ultimaAlt = data.ListaN0203REGPesquisa[i].UltimaAlteracao;
                    var usuarioUltAlt = data.ListaN0203REGPesquisa[i].UsuarioUltimaAlteracao + " - " + data.ListaN0203REGPesquisa[i].NomeUsuarioUltimaAlteracao;
                    var observacao = data.ListaN0203REGPesquisa[i].Observacao;
                    var selecionar = "<a style='color:#333333' href=\"#\" onClick=\"SelecionarRegistro('" + registro + "','" + tipoAtendimento + "','" + origemOcorrencia + "','" + codigoCliente + "','" + nomeCliente + "','" + codigoMotorista + "','" + nomeMotorista + "','" + codPlaca + "','" + descPlaca + "','" + dtHrGer + "','" + userGer + "','" + sitRegistro + "','" + ultimaAlt + "','" + usuarioUltAlt + "','" + observacao + "')\"><span class='glyphicon glyphicon-check' title='Selecionar Registro'></span></a>";
                    arrayRow[i] = new Array(selecionar, registro, tipoAtendimento, origemOcorrencia, codigoCliente, nomeCliente, cpfCnpj, ie, codigoMotorista, nomeMotorista, codPlaca, descPlaca, dtHrGer, userGer, sitRegistro, ultimaAlt, usuarioUltAlt);
                }
                $('#TableRegistro').dataTable().fnAddData(arrayRow);
                $('#TableRegistro').dataTable().fnPageChange('first');
                $("#gridTableRegistro").slideToggle('fast');
            }
            else {
                DialogPadrao("warning", "Aviso!", "warning", "Não existem Registro(s) em aberto.", "btnOkNenhumRegistroAberto", "OK", true);
                $('#RegistroDialog').modal('hide');
            }
            $('#progressBar').hide();
        });
    }
    function SelecionarRegistro(registro, tipoAtendimento, origemOcorrencia, codigoCliente, nomeCliente, codigoMotorista, nomeMotorista, codPlaca, descPlaca, dtHrGer, userGer, sitRegistro, ultimaAlt, usuarioUltAlt, observacao, regRep, datEmiRegRep) {
        $('#RegistroDialog').modal('hide');
        $("#NumRegistroTextBox").val(registro);
        $("#NumRegistroTextBox").valid();
        var tipoAtend = document.getElementById('TipoAtendimentoDropDownList');
        for (var i = 0; i < tipoAtend.length; i++) {
            if (tipoAtend[i].text == tipoAtendimento) {
                var codTipAted = parseInt(tipoAtend[i].value);
                $('#TipoAtendimentoDropDownList').val(codTipAted);
            }
        }
        var origens = document.getElementById('OrigemOcorrenciaFase1DropDownList');
        for (var i = 0; i < origens.length; i++) {
            if (origens[i].text == origemOcorrencia) {
                var codOrigem = parseInt(origens[i].value);
                $('#OrigemOcorrenciaFase1DropDownList').val(codOrigem);
            }
        }
        $("#CodClienteTextBox").val(codigoCliente);
        $("#NomeClienteTextBox").val(nomeCliente);
        $("#CodMotoristaTextBox").val(codigoMotorista);
        $("#NomeMotoristaTextBox").val(nomeMotorista);
        $("#CodPlacaTextBox").val(codPlaca);
        $("#DescricaoPlacaTextBox").val(descPlaca);
        $("#DataHoraGeracaoTextBox").val(dtHrGer);
        $("#UsuarioGeracaoTextBox").val(userGer);
        $("#SituacaoRegistroTextBox").val(sitRegistro);
        ValidaSituacaoReprovado(sitRegistro.substring(0, 1));
        $("#UltimaAlteracaoTextBox").val(ultimaAlt);
        $("#UsuarioUltimaAlteracaoTextBox").val(usuarioUltAlt);
        $("#ObservacoesTextBox").val(observacao);
        HabilitaFase2();
    }
    // ----------------------------------------------------------------------------------------------- //
    // =================================== INÍCIO DIALOG PADRAO  ========================================= //
    function DialogPadrao(tipoPanel, tituloDialog, tipoLabel, msgErro, idBotao, nomeBotao, focus) {
        var html_Dialog = ""
        + "<div class='modal-dialog'>"
        + "     <div class='panel panel-" + tipoPanel + "'>"
        + "         <div class='panel-heading'>"
        + "             <h3 class='panel-title'>" + tituloDialog + "</h3>"
        + "         </div>"
        + "         <div class='panel-body'>"
        + "             <div class='alert alert-dismissable alert-" + tipoLabel + "'>"
        + "                 <strong>" + msgErro + "</strong>"
        + "             </div>"
        + "             <div style='text-align:center'>"
        + "                 <button type='button' class='btn btn-default' id='" + idBotao + "'" + "onclick='$(\"#DialogPadrao\").hide();' data-dismiss='modal'>" + nomeBotao + "</button>"
        + "             </div>"
        + "         </div>"
        + "     </div>"
        + "</div>";
        $("#DialogPadrao").html(html_Dialog);
        $("#DialogPadrao").show();
        if (focus) {
            $("#" + idBotao).focus();
        }
        $("#btnOkDevolucaoSucesso").click(function () {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
        });
        $("#btnOkRegistroNaoEncontrado").click(function () {
            $('#NumRegistroTextBox').focus();
        });
        $("#btnOkProtocoloExcluidoSucesso").click(function () {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
        });
    }
    // =================================== FIM DIALOG PADRAO  ========================================= //
    // ----------------------------------------------------------------------------------------------- //
    // =============================== INÍCIO GRID NOTAS FISCAIS  ==================================== //
    $('#TableNotasFiscaisSaida').dataTable({
        "paging": false,
        "bSort": true,
        "bFilter": true,
        "Info": true,
        "bLengthChange": false,
        "bAutoWidth": true,
        "aoColumns": [
                    { "sClass": "center", "bSortable": false, "bSearchable": false },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "right" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" }, ],
        "oLanguage": {
            "sLengthMenu": "Mostrando _MENU_ registros por página",
            "sSearch": "Pesquisar:",
            "sZeroRecords": "Nenhum registro encontrado",
            "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
            "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
            "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
            "oPaginate": {
                "sFirst": "Primeiro",
                "sPrevious": "«&nbspAnterior",
                "sNext": "Próximo&nbsp»",
                "sLast": "Último"
            }
        },
        "scrollY": 150,
        "scrollX": true,
        "jQueryUI": true,
    });
    function PesquisarNotasFiscaisSaida(codigoCliente, codigoMotorista, codPlaca, tipoAtendimento) {
        $('#progressBar').show();
        $.ajaxSetup({ cache: false });
        $("#gridTableNotasFiscaisSaida").hide();
        $.getJSON("@Url.Action("PesquisarNotasFiscaisSaida")", { codigoCliente: codigoCliente, codigoMotorista: codigoMotorista, codPlaca: codPlaca, tipoAtendimento: tipoAtendimento }, function sucess(data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    var arrayRow = new Array();
                    $('#TableNotasFiscaisSaida').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaNotasSaida.length; i++) {
                        var empresa = data.listaNotasSaida[i].CodigoEmpresa;
                        var filial = data.listaNotasSaida[i].CodigoFilial;
                        var serie = data.listaNotasSaida[i].SerieNota;
                        var numNF = data.listaNotasSaida[i].NumeroNota;
                        var selecionar = "<input type='radio' name='fruit' id='radioCarregarItens" + numNF + "' tabindex='-1' alt=\"\" title=\"Carregar Itens da Nota\">";
                        var emissao = data.listaNotasSaida[i].DataEmissao;
                        var valorLiquido = "R$ " + data.listaNotasSaida[i].ValorLiquido.toString().replace(".", ",");
                        var situacao = data.listaNotasSaida[i].SituacaoNota;
                        var tipo = data.listaNotasSaida[i].TipoNota;
                        var codCliente = data.listaNotasSaida[i].CodigoCliente;
                        var nomeCliente = data.listaNotasSaida[i].NomeCliente;
                        var tNS = data.listaNotasSaida[i].TipoTransacao;
                        var descricaoTns = data.listaNotasSaida[i].DescricaoTipoTransacao;
                        var codTransportadora = data.listaNotasSaida[i].CodigoTransportadora;
                        var indSituacaoConferencia = data.listaNotasSaida[i].IndicativoConferencia;
                        var diasFaturamento = data.listaNotasSaida[i].DiasFaturamento;
                        arrayRow[i] = new Array(selecionar, empresa, filial, serie, numNF, emissao, valorLiquido, situacao, tipo, codCliente, nomeCliente, tNS, descricaoTns, codTransportadora, indSituacaoConferencia, diasFaturamento);
                    }
                    $('#TableNotasFiscaisSaida').dataTable().fnAddData(arrayRow);
                    $('#TableNotasFiscaisSaida').dataTable().fnPageChange('first');
                    $("#gridTableNotasFiscaisSaida").slideToggle('fast');
                    PesquisarItensDevolucao($("#NumRegistroTextBox").val());
                }
                else {
                    DialogPadrao("warning", "Aviso!", "warning", "O cliente informado não possuí notas disponíveis para devolução ou o motorista informado não é o responsável pela entrega das notas desse cliente.", "btnOkDialogErroNotasFiscaisSaida", "OK", true);
                }
                //$('#progressBar').hide();
            });
        }
        var idColunaTableNotasSaida;
        // Recupera o id da coluna clicada para selecionar a linha clicada no evento abaixo -- td ==> coluna
        $('#TableNotasFiscaisSaida tbody').on('click', 'td', function () {
            // idColuna
            idColunaTableNotasSaida = $(this).index();
        });
        // Recupera o ID da linha clicada -- tr ==> linha
        $('#TableNotasFiscaisSaida tbody').on('click', 'tr', function () {
            // Coluna Carregar
            if (idColunaTableNotasSaida == 0) {
                var table = $('#TableNotasFiscaisSaida').DataTable();
                // Se a linha que está sendo clicada não estiver selecionada, realiza as atividades abaixo...
                if (!$(this).hasClass('selected')) {
                    // Remove as linhas que já estevam selecionadas
                    table.$('tr.selected').removeClass('selected');
                    // Seleciona a linha que está sendo clicada
                    $(this).addClass('selected');
                    // Recupera os dados da linha clicada para carregar os campos abaixo
                    var dadosLinha = table.row(this).data();
                    var empresa = dadosLinha[1];
                    var filial = dadosLinha[2];
                    var serie = dadosLinha[3];
                    var numeroNota = dadosLinha[4];
                    // id do Radiobox da coluna que foi clicada
                    var idRadio = "radioCarregarItens" + numeroNota;
                    $("#" + idRadio).prop("checked", true);
                    // Carrega os itens da nota selecionada
                    PesquisarItensNotasFiscaisSaida(empresa, filial, serie, numeroNota);
                }
            }
        });
        // =================================== FIM GRID NOTAS FISCAIS  ========================================= //
        // ----------------------------------------------------------------------------------------------------- //
        // ================================== INÍCIO GRID ITENS NOTAS FISCAIS  ================================= //
        $('#TableItensNotasFiscaisSaida').dataTable({
            //"sPaginationType": "full_numbers",
            //"iDisplayLength": 10,
            //"iDisplayStart": 1,
            "paging": false,
            "bSort": true,
            "bFilter": true,
            "Info": true,
            "bLengthChange": false,
            "bAutoWidth": true,
            "aoColumns": [
                        { "sClass": "dpass", "bSortable": false, "bSearchable": false },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "left" },
                        { "sClass": "left" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "center" },
                        { "sClass": "dpass" },
            ],
            "oLanguage": {
                "sLengthMenu": "Mostrando _MENU_ registros por página",
                "sSearch": "Pesquisar:",
                "sZeroRecords": "Nenhum registro encontrado",
                "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
                "oPaginate": {
                    "sFirst": "Primeiro",
                    "sPrevious": "«&nbspAnterior",
                    "sNext": "Próximo&nbsp»",
                    "sLast": "Último"
                }
            },
            "scrollY": 330,
            "scrollX": true,
            "jQueryUI": true,
        });
        function PesquisarItensNotasFiscaisSaida(empresa, filial, serieNota, numeroNota) {
            $('#progressBar').show();
            $.ajaxSetup({ cache: false });
            $("#gridTableItensNotasFiscaisSaida").hide();
            $.getJSON("@Url.Action("PesquisarItensNotasFiscaisSaida")", { filial: filial, numeroNota: '' + numeroNota, serieNota: '' + serieNota }, function sucess(data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.PesquisaSucesso) {
                    var arrayRow = new Array();
                    $('#TableItensNotasFiscaisSaida').dataTable().fnClearTable();
                    for (var i = 0; i < data.listaItens.length; i++) {
                        var seq = data.listaItens[i].Sequencia;
                        var selecionar = "<input type='checkbox' id='checkBoxSelecionarItensDev" + numeroNota + "-" + seq + "' tabindex='-1' alt=\"\" title=\"Selecionar Item para Devolução\">";
                        var tNS = data.listaItens[i].Transacao;
                        var codigo = data.listaItens[i].CodigoProduto;
                        var descricao = data.listaItens[i].DescricaoProduto;
                        var qtdeFaturada = data.listaItens[i].QtdeFaturada;
                        var qtdeDevolucao = data.listaItens[i].QtdeDevolucao;
                        var precoUnitario = "R$ " + data.listaItens[i].PrecoUnitario.toString().replace(".", ",");
                        var motivoDevolucao = data.listaItens[i].MotivoDevolucao;
                        var origemOcorrencia = data.listaItens[i].OrigemOcorrencia;
                        var perDescUni = data.listaItens[i].PercDescUnit + " %";
                        var percDescIpi = data.listaItens[i].PercIpi + " %";
                        var valorIpi = data.listaItens[i].ValorIpi.toString().replace(".", ",");
                        var valorLiquido = "R$ " + data.listaItens[i].ValorLiquido.toString().replace(".", ",");
                        var valorSt = "R$ " + data.listaItens[i].ValorSt.toString().replace(".", ",");
                        var dep = data.listaItens[i].Departamento;
                        var valorFrete = "R$ " + data.listaItens[i].ValorFrete.toString().replace(".", ",");
                        var saldo = data.listaItens[i].SaldoDevolucao;
                        var idLinha = i.toString();
                        arrayRow[i] = new Array(selecionar, seq, tNS, codigo, descricao, qtdeFaturada, qtdeDevolucao, precoUnitario, motivoDevolucao, origemOcorrencia, perDescUni, percDescIpi, valorIpi, valorLiquido, valorSt, dep, valorFrete, idLinha, saldo);
                    }
                    $('#TableItensNotasFiscaisSaida').dataTable().fnAddData(arrayRow);
                    $('#TableItensNotasFiscaisSaida').dataTable().fnPageChange('first');
                    $("#gridTableItensNotasFiscaisSaida").slideToggle('fast');
                    PopulaCamposDivItensNotasFiscaisSaida(empresa, filial, serieNota, numeroNota);
                    $('#DivItensNotasFiscaisSaida').show();
                    SetarSelectMotivoOrigem();
                    LimpaCamposTotais();
                    focusFinalPagina();
                }
                else {
                    $('#DivItensNotasFiscaisSaida').hide();
                    DialogPadrao("warning", "Aviso!", "warning", "A nota selecionada não possuí nenhum item.", "btnOkItensNaoEncontrados", "OK", true);
                }
                $('#progressBar').hide();
            })
        }
        function PesquisarItensDevolucao(codigoRegistro) {
            $("#gridTableItensNotasFiscaisDevolucao").hide();
            $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("PesquisarItensDevolucao")", { codigoRegistro: codigoRegistro }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.PesquisaSucesso) {
                var arrayRow = new Array();
                $('#TableItensNotasFiscaisDevolucao').dataTable().fnClearTable();
                for (var i = 0; i < data.ListaN0203IPVPesquisa.length; i++) {
                    var empresa = data.ListaN0203IPVPesquisa[i].Empresa;
                    var filial = data.ListaN0203IPVPesquisa[i].Filial;
                    var serieNota = data.ListaN0203IPVPesquisa[i].SerieNota;
                    var numeroNota = data.ListaN0203IPVPesquisa[i].NumeroNota;
                    var seqNota = data.ListaN0203IPVPesquisa[i].SeqNota;
                    var tipoTransacao = data.ListaN0203IPVPesquisa[i].TipoTransacao;
                    var codPro = data.ListaN0203IPVPesquisa[i].CodPro;
                    var codDer = data.ListaN0203IPVPesquisa[i].CodDer;
                    var descPro = data.ListaN0203IPVPesquisa[i].DescPro;
                    var qtdeFat = data.ListaN0203IPVPesquisa[i].QtdeFat;
                    var qtdeDevolucao = data.ListaN0203IPVPesquisa[i].QtdeDevolucao;
                    var descOrigemOcorrencia = data.ListaN0203IPVPesquisa[i].DescOrigemOcorrencia;
                    var descMotivoDevolucao = data.ListaN0203IPVPesquisa[i].DescMotivoDevolucao;
                    //var precoUnitario = "R$ " + data.ListaN0203IPVPesquisa[i].PrecoUnitario.toString().replace(".", ",");
                    var precoUnitario = "R$ " + data.ListaN0203IPVPesquisa[i].PrecoUnitarioS;
                    var percDesconto = data.ListaN0203IPVPesquisa[i].PercDesconto.toString().replace(".", ",") + " %";
                    var percIpi = data.ListaN0203IPVPesquisa[i].PercIpi.toString().replace(".", ",") + " %";
                    //var valorIpi = data.ListaN0203IPVPesquisa[i].ValorIpi.toString().replace(".", ",");
                    var valorIpi = data.ListaN0203IPVPesquisa[i].ValorIpiS;
                    //var valorLiquido = "R$ " + data.ListaN0203IPVPesquisa[i].ValorLiquido.toString().replace(".", ",");
                    var valorLiquido = "R$ " + data.ListaN0203IPVPesquisa[i].ValorLiquidoS;
                    var valorSt = "R$ " + data.ListaN0203IPVPesquisa[i].ValorStS;
                    var codDepartamento = data.ListaN0203IPVPesquisa[i].CodDepartamento;
                    var dataUltimaAlteracao = data.ListaN0203IPVPesquisa[i].DataUltimaAlteracao;
                    var usuarioUltimaAlteracao = data.ListaN0203IPVPesquisa[i].UsuarioUltimaAlteracao + " - " + data.ListaN0203IPVPesquisa[i].NomeUsuarioUltimaAlteracao;
                    arrayRow[i] = new Array(empresa, filial, serieNota, numeroNota, seqNota, tipoTransacao, codPro, codDer, descPro, qtdeFat, qtdeDevolucao, descOrigemOcorrencia, descMotivoDevolucao, precoUnitario, percDesconto, percIpi, valorIpi, valorLiquido, valorSt, codDepartamento, dataUltimaAlteracao, usuarioUltimaAlteracao);
                }
                $('#TableItensNotasFiscaisDevolucao').dataTable().fnAddData(arrayRow);
                $('#TableItensNotasFiscaisDevolucao').dataTable().fnPageChange('first');
                $("#gridTableItensNotasFiscaisDevolucao").slideToggle('fast');
                PesquisarAnexos($("#NumRegistroTextBox").val());
                DesabilitaFase1();
                HabilitaFase2();
                $('#DivPanelFase2').show();
                var notasAdicionadas = data.ListaN0203IPVPesquisa[data.ListaN0203IPVPesquisa.length - 1].NotasAdicionadas;
                AtualizaTotaisItensNotasReceber(notasAdicionadas)
                AtualizaTotaisDevolucao();
                HabilitaFase34();
                MostraBotaoExcluirItensDev();
                $('#DivPanelFase3').show();
            }
            $('#progressBar').hide();
        });
    }
    function AtualizaTotaisItensNotasReceber(notasAdicionadas) {
        var notasAdd = notasAdicionadas.split("-");
        var tableNotasFiscais = $('#TableNotasFiscaisSaida').DataTable();
        var dataNotasFiscais = tableNotasFiscais.rows().data();
        var valorNota = 0.00;
        for (var x = 0; x < notasAdd.length - 1; x++) {
            for (var y = 0; y < dataNotasFiscais.length; y++) {
                if (notasAdd[x] == dataNotasFiscais[y][4]) {
                    var preco = dataNotasFiscais[y][6].toString().replace("R$ ", "").replace(",", ".");
                    valorNota = (parseFloat(valorNota) + parseFloat(preco.toString())).toFixed(2);
                    notasAdicionadasDevolucao = notasAdicionadasDevolucao + notasAdd[x] + "-";
                }
            }
        }
        $("#ValorTotalNotasTextBox").val(valorNota.toString().replace(".", ","));
        //notasAdicionadasDevolucao = notasAdicionadasDevolucao.substring(0, notasAdicionadasDevolucao.length - 1);
    }
    // Popula campos
    function PopulaCamposDivItensNotasFiscaisSaida(empresa, filial, serie, numeroNota) {
        $("#EmpresaTextBox").val(empresa);
        $("#FilialTextBox").val(filial);
        $("#SerieTextBox").val(serie);
        $("#NumNotaFiscalTextBox").val(numeroNota);
    }
    // Seta motivo e origem para Selecione...
    function SetarSelectMotivoOrigem() {
        $("#MotivoDevolucaoFase2DropDownList").prop('selectedIndex', 0);
        $("#OrigemOcorrenciaFase2DropDownList").prop('selectedIndex', 0);
        document.getElementById('OrigemOcorrenciaFase2DropDownList').disabled = true;
    }
    // Limpa campos das quantidades totais de itens de nota fiscal
    function LimpaCamposTotais() {
        $("#QtdeTotalTextBox").val("");
        $("#ValorBrutoTextBox").val("");
        $("#ValorIpiTextBox").val("");
        $("#ValorStTextBox").val("");
        $("#ValorLiquidoTextBox").val("");
    }
    // Direciona o foco para a parte inferior da página
    function focusFinalPagina() {
        setTimeout(function () {
            //window.location.hash = '#AdicionarItenButton';
            scrollTo(0, 530);
            var table = $('#TableItensNotasFiscaisSaida').dataTable();
            table.fnFilter('');
        }, 800);
    }
    // Variavel para guardar o indice da coluna que foi clicada para controle do checkbox da tabela de itens
    var idColunaCheckTableItensNotasSaida;
    $('#TableItensNotasFiscaisSaida tbody').on('click', 'td', function () {
        idColunaCheckTableItensNotasSaida = $(this).index();
    });
    var idLinhaColunaInvisivel = "";
    var qtdeFaturadaItemNota;
    var saldo;
    // Quando o checkbox da tabela de itens de notas fiscal for marcado, a linha do checkbox marcado recebe "seleção"...
    $('#TableItensNotasFiscaisSaida tbody').on('click', 'tr', function () {
        var table = $('#TableItensNotasFiscaisSaida').DataTable();
        // Recupera o número da nota da linha clicada para carregar os itens
        var dadosLinha = table.row(this).data();
        var numeroNota = $("#NumNotaFiscalTextBox").val();
        var seqNota = dadosLinha[1];
        qtdeFaturadaItemNota = dadosLinha[5];
        var qtdeDev = dadosLinha[6];
        var motivoDev = dadosLinha[8];
        var origemOcor = dadosLinha[9];
        idLinhaColunaInvisivel = dadosLinha[17];
        saldo = dadosLinha[18];
        if (idColunaCheckTableItensNotasSaida == 0) {
            var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
            if ($(this).hasClass('selected')) {
                $("#" + idCheckBox).prop("checked", false);
                $(this).removeClass('selected');
            }
            else {
                $("#" + idCheckBox).prop("checked", true);
                $(this).addClass('selected');
            }
            AtualizaTotais();
        }
        else {
            AbrirAlterarItemNotaDialog(numeroNota, seqNota, qtdeDev, motivoDev, origemOcor);
        }
    });
    function AbrirAlterarItemNotaDialog(numeroNota, seqNota, qtdeDev, motivoDev, origemOcor) {
        $('#LabelErroAlterarItemNotaDialog').hide();
        if (parseInt(qtdeDev) > 0) {
            $('#QtdeDevolucaoItemNotaTextBox').val(qtdeDev);
        }
        else {
            $('#QtdeDevolucaoItemNotaTextBox').val("");
        }
        $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: false });
        $("#FieldErrorQtdeDevFat").removeClass("field-validation-error").addClass("field-validation-valid");
        $("#FieldErrorMotivoDevolucaoItemNota").removeClass("field-validation-error").addClass("field-validation-valid");
        $("#FieldErrorOrigemOcorrenciaItemNota").removeClass("field-validation-error").addClass("field-validation-valid");
        $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
        $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
        var motivos = document.getElementById('MotivoDevolucaoItemNotaDropDownList');
        for (var i = 0; i < motivos.length; i++) {
            if (motivos[i].text == motivoDev) {
                var codMotivo = parseInt(motivos[i].value);
                $('#MotivoDevolucaoItemNotaDropDownList').val(codMotivo);
                CarregaDropDownOrigemOcorrencia(codMotivo, "OrigemOcorrenciaItemNotaDropDownList", origemOcor);
            }
        }

        $('#AlterarItemNotaDialog h3').text("Alterar Nota " + numeroNota + " Item Sequência " + seqNota);
        $('#AlterarItemNotaDialog').modal('show');
        $('#QtdeDevolucaoItemNotaTextBox').focus();
    }
    // Atualiza totais grid Itens de nota fical
    function AtualizaTotais() {
        var table = $('#TableItensNotasFiscaisSaida').DataTable();
        // Recebe os valores de todas as linhas selecionadas
        var data = table.rows('.selected').data();
        var qtdeFaturada = 0;
        var qtdeDevolucao = 0;
        var qtdeTotal = 0;
        var valorBruto = 0.00;
        var valorIpi = 0.00;
        var valorSt = 0.00;
        var valorLiquido = 0.00;
        for (var i = 0; i < data.length; i++) {
            qtdeFaturada = data[i][5];
            qtdeDevolucao = data[i][6];
            qtdeDevolucao = parseInt(qtdeDevolucao);
            qtdeTotal = qtdeTotal + qtdeDevolucao;
            var precoUnitario = data[i][7].toString().replace("R$ ", "").replace(",", ".");
            valorBruto = (parseFloat(valorBruto) + ((parseFloat(precoUnitario) * qtdeDevolucao))).toFixed(2);
            var vlIpi = data[i][12].toString().replace(",", ".");
            var vlIpiUnidade = qtdeDevolucao * (parseFloat(vlIpi) / qtdeFaturada);
            valorIpi = valorIpi + vlIpiUnidade;
            var vlSt = data[i][14].toString().replace("R$ ", "").replace(",", ".");
            var vlrStUnidade = qtdeDevolucao * (parseFloat(vlSt) / qtdeFaturada);
            valorSt = valorSt + vlrStUnidade;
        }
        valorLiquido = (parseFloat(valorBruto.toString()) + parseFloat(valorIpi.toString()) + parseFloat(valorSt.toString())).toFixed(2);
        valorIpi = parseFloat(valorIpi.toString()).toFixed(2);
        valorSt = parseFloat(valorSt.toString()).toFixed(2);
        $("#QtdeTotalTextBox").val(qtdeTotal);
        $("#ValorBrutoTextBox").val(valorBruto);
        $("#ValorIpiTextBox").val(valorIpi);
        $("#ValorStTextBox").val(valorSt);
        $("#ValorLiquidoTextBox").val(valorLiquido);
        HabilitaMaskaraMoeda();
    }
    // Valida se somente foi digitado números
    function ValidaNumero(texto) {
        var numeros = "0123456789";
        var somenteNumero = true;
        texto = texto.toString().toLowerCase();
        for (i = 0; i < texto.length; i++) {
            if (!(numeros.indexOf(texto.charAt(i), 0) != -1)) {
                somenteNumero = false;
            }
        }
        return somenteNumero;
    }
    // =================================== FIM GRID ITENS NOTAS FISCAIS  ========================================= //
    // ----------------------------------------------------------------------------------------------------------- //
    // ================================== INÍCIO GRID ITENS DE DEVOLUÇÃO   ======================================= //
    $('#TableItensNotasFiscaisDevolucao').dataTable({
        "sPaginationType": "full_numbers",
        "iDisplayLength": 10,
        "iDisplayStart": 1,
        "paging": true,
        "bSort": true,
        "bFilter": true,
        "Info": true,
        "bLengthChange": true,
        "bAutoWidth": true,
        "aoColumns": [
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "left" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" },
                    { "sClass": "center" }, ],
        "oLanguage": {
            "sLengthMenu": "Mostrando _MENU_ registros por página&nbsp&nbsp",
            "sSearch": "Pesquisar:",
            "sZeroRecords": "Nenhum registro encontrado",
            "sInfo": "Mostrando _START_ até _END_ de _TOTAL_ registros",
            "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
            "sInfoFiltered": "(Pesquisados no total de _MAX_ registros)",
            "oPaginate": {
                "sFirst": "Primeiro",
                "sPrevious": "«&nbspAnterior",
                "sNext": "Próximo&nbsp»",
                "sLast": "Último"
            }
        },
        "scrollX": true,
        "jQueryUI": true,
    });
    // Seleciona as linhas da grid de itens de devolução de nota fiscal
    $('#TableItensNotasFiscaisDevolucao tbody').on('click', 'tr', function () {
        $(this).toggleClass('selected');
    });
    // Adiciona os itens selecionados na fase 3
    $('#AdicionarItenButton').click(function () {
        // Limpa a pesquisa da grid (Campo pesquisar) -- Se Houver
        $('#TableItensNotasFiscaisSaida').dataTable().fnFilter('');
        if (ValidaCamposGridItensNotaFiscal()) {
            if (ValidaItensIncluidosGridDevolucao()) {
                AddItensGridDevolucao();
                AtualizaTotaisDevolucao();
                //HabilitaFase34();
                //$('#DivPanelFase3').show();
                DialogPadrao("success", "Sucesso!", "success", "Itens adicionados com sucesso!", "btnOkDialogItensAddSucesso", "OK", true);
                AtualizaTotais();
            }
        }
    });
    function MostraBotaoExcluirItensDev() {
        $('<button id="ExcluirItemDevolucaoButton" class="delete_row ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" type="button" aria-disabled="false"><span class="ui-button-icon-primary ui-icon ui-icon-trash"></span><span class="ui-button-text">Excluir</span></button>').appendTo('div.dataTables_length');
        // Botão excluir itens de devolução
        $('#ExcluirItemDevolucaoButton').click(function () {
            var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
            // Recebe os valores de todas as linhas selecionadas
            var data = table.rows('.selected').data();
            if (data.length > 0) {
                table.row('.selected').remove().draw(false);
                AtualizaTotaisDevolucao();
                AtualizaTotaisNotasReceberExclusao();
                DialogPadrao("success", "Sucesso!", "success", "Iten(s) excluído(s) com sucesso!", "btnOkDialogItensExcSucesso", "OK", true);
            }
            else {
                DialogPadrao("warning", "Aviso!", "warning", "Favor selecionar ao menos um item para excluir.", "btnOkItensExcErro", "OK", true);
            }
        });
    }
    // Valida a integridade dos registros
    function ValidaCamposGridItensNotaFiscal() {
        var table = $('#TableItensNotasFiscaisSaida').DataTable();
        // Recebe os valores de todas as linhas selecionadas
        var data = table.rows('.selected').data();
        if (data.length == 0) {
            msgErro = "Favor selecionar ao menos um item de nota fiscal."
        }
        else {
            var msgErro = "";
            for (var i = 0; i < data.length; i++) {
                var soNumero = ValidaNumero(data[i][6]);
                if (!soNumero) {
                    msgErro = msgErro + "A quantidade de devolução da Seq. " + data[i][1] + " aceita somente números inteiros.<br/>";
                }
                else if (parseInt(data[i][6]) == 0) {
                    msgErro = msgErro + "A quantidade de devolução da Seq. " + data[i][1] + " não pode ser zero.<br/>";
                }
                if (data[i][8].indexOf("Selecione") > -1) {
                    msgErro = msgErro + "O motivo de devolução da Seq. " + data[i][1] + " não foi selecionado.<br/>";
                }
                if (data[i][9].indexOf("Selecione") > -1) {
                    msgErro = msgErro + "A origem da ocorrência da Seq. " + data[i][1] + " não foi selecionada.<br/>";
                }
            }
            var dataTotal = table.rows().data();
            var dataNaoSelec = new Array();
            var indicedataNaoSelec = 0;
            for (var y = 0; y < dataTotal.length; y++) {
                var valida = false;
                for (var x = 0; x < data.length; x++) {
                    if (dataTotal[y] == data[x]) {
                        valida = true;
                    }
                }
                if (!valida) {
                    dataNaoSelec[indicedataNaoSelec] = dataTotal[y];
                    indicedataNaoSelec = indicedataNaoSelec + 1;
                }
            }
            if (dataNaoSelec.length > 0) {
                for (var i = 0; i < dataNaoSelec.length; i++) {
                    if (parseInt(dataNaoSelec[i][6]) != "0") {
                        msgErro = msgErro + "A quantidade de devolução da Seq. " + dataNaoSelec[i][1] + " foi informada porém não está selecionada. Digite zero ou selecione a mesma para devolução.<br/>";
                    }
                }
            }
        }
        if (msgErro != "") {
            DialogPadrao("warning", "Aviso!", "warning", msgErro, "BtnOkValidaDevolucaoDialog", "OK", true);
            return false;
        }
        return true;
    }
    // Verifica se os itens que estão sendo incluídos para devolução já foram incluídos (duplicidade)
    function ValidaItensIncluidosGridDevolucao() {
        var tableSelec = $('#TableItensNotasFiscaisSaida').DataTable();
        var datatableSelec = tableSelec.rows('.selected').data();
        var numeroNota = $("#NumNotaFiscalTextBox").val();
        var tableDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var datatableDevolucao = tableDevolucao.rows().data();
        if (datatableDevolucao.length > 0) {
            var msgErro = "";
            for (var i = 0; i < datatableSelec.length; i++) {
                for (var x = 0; x < datatableDevolucao.length; x++) {
                    if (numeroNota == datatableDevolucao[x][3] && datatableSelec[i][1] == datatableDevolucao[x][4]) {
                        msgErro = msgErro + "O item da nota " + numeroNota + " Seq " + datatableSelec[i][1] + " já foi selecionado para devolução.<br/>";
                    }
                }
            }
            if (msgErro != "") {
                msgErro = msgErro + "<br/>Remova o(s) iten(s) da seleção ou remova o(s) iten(s) da tabela de devolução (Fase 3) para adicionar novamente."
                DialogPadrao("danger", "Aviso!", "danger", msgErro, "BtnOkValidaItensIncluidos", "OK", true);
                return false;
            }
        }
        return true;
    }
    // Add os itens de nota fiscal selecionados para devolução (fase 3)
    function AddItensGridDevolucao() {
        var dtHrAtual = DataHoraAtual();
        var codUsuarioLogado = '@Session[NWORKFLOW_WEB.MVC_4_BS.Views.Util.SessionKeys.CodigoUsuarioLogado]';
        var nomeUsuarioLogado = '@Session[NWORKFLOW_WEB.MVC_4_BS.Views.Util.SessionKeys.NomeUsuarioLogado]';
        var tableSelec = $('#TableItensNotasFiscaisSaida').DataTable();
        var data = tableSelec.rows('.selected').data();
        var tableDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var empresa = $("#EmpresaTextBox").val();
        var filial = $("#FilialTextBox").val();
        var serie = $("#SerieTextBox").val();
        var numNota = $("#NumNotaFiscalTextBox").val();
        var valida = ValidaTotaisNotasReceber();
        for (var i = 0; i < data.length; i++) {
            var codProDer = data[i][3].toString().split(" ");
            tableDevolucao.row.add([
                    empresa,
                    filial,
                    serie,
                    numNota,
                    data[i][1],
                    data[i][2],
                    codProDer[0],
                    codProDer[1],
                    data[i][4],
                    data[i][5],
                    data[i][6],
                    data[i][9],
                    data[i][8],
                    data[i][7],
                    data[i][10],
                    data[i][11],
                    data[i][12],
                    data[i][13],
                    data[i][14],
                    data[i][15],
                    dtHrAtual,
                    codUsuarioLogado + " - " + nomeUsuarioLogado
            ]).draw();
        }
        if (valida) {
            AtualizaTotaisNotasReceber();
        }
        tableSelec.row('.selected').remove().draw(false);
        var dataTotal = tableSelec.rows().data();
        if (dataTotal.length == 0) {
            $('#DivItensNotasFiscaisSaida').hide();
        }
    }
    function DataHoraAtual() {
        var d = new Date();
        var dataHoraAtual = (
            ("00" + (d.getMonth() + 1)).slice(-2) + "/" +
            ("00" + d.getDate()).slice(-2) + "/" +
            d.getFullYear() + " " +
            ("00" + d.getHours()).slice(-2) + ":" +
            ("00" + d.getMinutes()).slice(-2) + ":" +
            ("00" + d.getSeconds()).slice(-2)
        );
        return dataHoraAtual;
    }
    var notasAdicionadasDevolucao = "";
    function AtualizaTotaisNotasReceber() {
        var tableNotas = $('#TableNotasFiscaisSaida').DataTable();
        var dataNotas = tableNotas.rows().data();
        var tableItens = $('#TableItensNotasFiscaisSaida').DataTable();
        var dataItens = tableItens.rows('.selected').data();
        var totalNotas = 0;
        var valorAtualTotalNotas = $("#ValorTotalNotasTextBox").val().replace(".", "").replace(",", ".");
        var numNota = $("#NumNotaFiscalTextBox").val();
        notasAdicionadasDevolucao = notasAdicionadasDevolucao + numNota + "-";
        for (var y = 0; y < dataNotas.length; y++) {
            if (numNota == dataNotas[y][4]) {
                totalNotas = dataNotas[y][6].toString().replace("R$ ", "").replace(",", ".");
                if (valorAtualTotalNotas != "") {
                    totalNotas = (parseFloat(valorAtualTotalNotas.toString().replace(",", ".")) + parseFloat(totalNotas)).toFixed(2);
                }
                else {
                    totalNotas = parseFloat(totalNotas).toFixed(2);
                }
                $("#ValorTotalNotasTextBox").val(totalNotas.toString().replace(".", ","));
                return;
            }
        }
    }
    // Verifica se a nota do item que está sendo incluído já foi incluído anteriormente para não somar o total da nota novamente no campo de valor total das notas faturadas...
    function ValidaTotaisNotasReceber() {
        var numNota = $("#NumNotaFiscalTextBox").val();
        var tableItensDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var dataItensDevolucao = tableItensDevolucao.rows().data();
        for (var y = 0; y < dataItensDevolucao.length; y++) {
            if (numNota == dataItensDevolucao[y][3]) {
                return false;
            }
        }
        return true;
    }
    // Atualiza totais grid Itens de devolução de nota fical
    function AtualizaTotaisDevolucao() {
        var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
        // Recebe os valores de todas as linhas selecionadas
        var data = table.rows().data();
        var qtdeFaturada = 0;
        var qtdeDevolucao = 0;
        var qtdeTotal = 0;
        var valorBruto = 0;
        var valorIpi = 0;
        var valorSt = 0.00;
        var valorLiquido = 0;
        for (var i = 0; i < data.length; i++) {
            qtdeFaturada = parseInt(data[i][09]);
            qtdeDevolucao = parseInt(data[i][10]);
            qtdeTotal = qtdeTotal + qtdeDevolucao;
            var precoUnitario = data[i][13].toString().replace("R$ ", "").replace(",", ".");
            valorBruto = (parseFloat(valorBruto) + ((parseFloat(precoUnitario) * qtdeDevolucao))).toFixed(2);
            var vlIpi = data[i][16].toString().replace(",", ".");
            var vlIpiUnidade = qtdeDevolucao * (parseFloat(vlIpi) / qtdeFaturada);
            valorIpi = valorIpi + vlIpiUnidade;
            var vlSt = data[i][18].toString().replace("R$ ", "").replace(",", ".");
            var vlrStUnidade = qtdeDevolucao * (parseFloat(vlSt) / qtdeFaturada);
            valorSt = valorSt + vlrStUnidade;
        }
        valorLiquido = (parseFloat(valorBruto.toString()) + parseFloat(valorIpi.toString()) + parseFloat(valorSt.toString())).toFixed(2);
        valorIpi = parseFloat(valorIpi.toString()).toFixed(2);
        valorSt = parseFloat(valorSt.toString()).toFixed(2);
        $("#QtdeTotalDevolucaoTextBox").val(qtdeTotal);
        $("#ValorBrutoDevolucaoTextBox").val(valorBruto);
        $("#ValorIpiDevolucaoTextBox").val(valorIpi);
        $("#ValorStDevolucaoTextBox").val(valorSt);
        $("#ValorLiquidoDevolucaoTextBox").val(valorLiquido);
        var totalNotas = $("#ValorTotalNotasTextBox").val();
        var valorReceber = (parseFloat(totalNotas.replace(",", ".")) - valorLiquido).toFixed(2);
        $("#ValorReceberTextBox").val(valorReceber.toString().replace(".", ","));
    }
    // Quando todos os itens de devolução de uma nota fiscal são excluídos, atualiza os campos de valor total das notas e valor a receber
    function AtualizaTotaisNotasReceberExclusao() {
        var notasAdd = notasAdicionadasDevolucao.split("-")
        var tableItensDevolucao = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var dataItensDevolucao = tableItensDevolucao.rows().data();
        for (var x = 0; x < notasAdd.length; x++) {
            var excluido = true;
            for (var y = 0; y < dataItensDevolucao.length; y++) {
                if (notasAdd[x] == dataItensDevolucao[y][3]) {
                    excluido = false;
                }
            }
            if (excluido) {
                var tableNotas = $('#TableNotasFiscaisSaida').DataTable();
                var dataNotas = tableNotas.rows().data();
                var valorNota = 0;
                for (var y = 0; y < dataNotas.length; y++) {
                    if (notasAdd[x] == dataNotas[y][4]) {
                        valorNota = dataNotas[y][6].toString().replace("R$ ", "").replace(".", "").replace(",", "");
                    }
                }
                var valorAtualTotalNotas = $("#ValorTotalNotasTextBox").val().toString().replace(".", "").replace(",", "");
                var totalNotas = parseFloat(valorAtualTotalNotas) - parseFloat(valorNota);
                $("#ValorTotalNotasTextBox").val(totalNotas);
                notasAdicionadasDevolucao = notasAdicionadasDevolucao.replace(notasAdd[x], "");
            }
        }
        var valorLiquido = $("#ValorLiquidoDevolucaoTextBox").val().toString().replace(".", "").replace(",", "");
        var valorReceber = totalNotas - parseFloat(valorLiquido);
        $("#ValorReceberTextBox").val(valorReceber);
        HabilitaMaskaraMoedaDevolucao();
    }

    function MudarMotivoDevolucao() {
        scrollTo(0, 0);
        $('#progressBar').show();
        setTimeout(function () {
            var codigoMotivo = $("#MotivoDevolucaoFase2DropDownList option:selected").val();
            var descricaoMotivo = $("#MotivoDevolucaoFase2DropDownList option:selected").text();
            if (codigoMotivo != "0") {
                CarregaDropDownOrigemOcorrencia(codigoMotivo, "OrigemOcorrenciaFase2DropDownList", "");
            }
            else {
                $("#OrigemOcorrenciaFase2DropDownList").empty();
                $("#OrigemOcorrenciaFase2DropDownList").append($('<option></option>').val("0").html("Selecione..."));
                document.getElementById('OrigemOcorrenciaFase2DropDownList').disabled = true;
            }
            var table = $('#TableItensNotasFiscaisSaida').dataTable();
            $(table.fnSettings().aoData).each(function () {
                if ($(this.nTr).hasClass('selected')) {
                    $(this.nTr).removeClass('selected');
                }
                table.fnUpdate("0", $(this.nTr).index(), 6, false, false);
                table.fnUpdate(descricaoMotivo, $(this.nTr).index(), 8, false, false);
                table.fnUpdate("Selecione...", $(this.nTr).index(), 9, false, false);
            });
            $('#progressBar').hide();
            scrollTo(0, 490);
            AtualizaTotais();
        }, 10);
    }
    function MudarOrigemOcorrencia() {
        scrollTo(0, 0);
        $('#progressBar').show();
        setTimeout(function () {
            var valorOrigem = $("#OrigemOcorrenciaFase2DropDownList option:selected").text();
            var numeroNota = $("#NumNotaFiscalTextBox").val();
            var table = $('#TableItensNotasFiscaisSaida').dataTable();
            $(table.fnSettings().aoData).each(function () {
                var dadosLinha = table.fnGetData($(this.nTr).index());
                var seqNota = dadosLinha[1];
                var qtdeFat = dadosLinha[5];
                var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                table.fnUpdate(valorOrigem, $(this.nTr).index(), 9, false, false);
                table.fnUpdate(qtdeFat, $(this.nTr).index(), 6, false, false);
                $(this.nTr).addClass('selected');
                $("#" + idCheckBox).prop("checked", true);
            });
            $('#progressBar').hide();
            scrollTo(0, 490);
            AtualizaTotais();
        }, 10);
    }
    // =========================== FIM MOTIVO DEVOLUCAO E ORIGEM OCORRÊNCIA  ============================ //
    // ----------------------------------------------------------------------------------------------------- //
    $('#FinalizarButton').click(function () {
        $("#ObservacoesTextBox").rules("add", { required: true, maxlength: 400 });
        ValidaObservacoes();
        if (ValidaDevolucao()) {
            if ($("#ObservacoesTextBox").valid()) {
                $('#AcaoHidden').val('Finalizar');
                var codCli = $('#CodClienteTextBox').val();
                $('#CodClienteHidden').val(codCli);
                var lista = ListaNotasAgrupadas();
                if ($('#SituacaoRegistroTextBox').val() == "5 - Reprovado") {
                    ValidaNotasProtocoloReprovado($('#NumRegistroTextBox').val(), lista)
                }
                else {
                    ValidaNotasOutroProtocolo($('#NumRegistroTextBox').val(), lista);
                }
            }
            else {
                return false;
            }
        }
    });
    function ListaNotasAgrupadas() {
        $('#progressBar').show();
        var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var data = table.rows().data();
        var lista = "";
        for (var i = 0; i < data.length; i++) {
            var Filial = data[i][1] + "&";
            var NumeroNota = data[i][3] + "&";
            var FilNota = Filial + NumeroNota;
            if (lista.indexOf(FilNota) == -1) {
                lista = lista + FilNota;
            }
        }
        return lista;
    }
    function ValidaNotasOutroProtocolo(codProtocolo, lista) {
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("ValidaNotasOutroProtocolo")", { codProtocolo: codProtocolo, lista: lista }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.validaNotas) {
                ListaItensDevolucao();
            }
            else {
                var msg = "Não é permitido gerar ocorrência de devolução em duplicidade.<br/><br/>" + data.msgRetorno;
                DialogPadrao("warning", "Ocorrência não cadastrada.", "warning", msg, "btnOkRegNaoCadastrado", "OK", true);
                $('#progressBar').hide();
            }
        });
    }
    function ValidaNotasProtocoloReprovado(codProtocolo, lista) {
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("ValidaNotasProtocoloReprovado")", { codProtocolo: codProtocolo, lista: lista }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.validaNotas) {
                ListaItensDevolucao();
            }
            else {
                var msg = "Quando a situação da ocorrência é Reprovado, o mesmo não pode sofrer alterações, ou seja, não é possível adicionar outra(s) nota(s) para devolução! Somente a(s) nota(s) de origem pode(m) sofrer alterações (Motivo de Devolução e Origem da Ocorrência).";
                DialogPadrao("warning", "Ocorrência não cadastrada.", "warning", msg, "btnOkRegNaoCadastrado", "OK", true);
                $('#progressBar').hide();
            }
        });
    }
    $('#RascunhoButton').click(function () {
        $("#ObservacoesTextBox").rules("add", { required: false, maxlength: 400 });
        //$("#ObservacoesDiv").removeClass("col-lg-10-2 has-error").addClass("col-lg-10-2");
        ValidaObservacoes();
        if ($("#ObservacoesTextBox").valid()) {
            if (ValidaDevolucao()) {
                $('#AcaoHidden').val('Rascunho');
                ListaItensDevolucao();
            }
        }
        else {
            return false;
        }
    });
    $('#ObservacoesTextBox').bind('paste', null, function (e) {
        if (!e.keyCode) {
            ValidaObservacoes();
        }
    });
    var msgRetorno = '@Model.MensagemRetorno';
    if (msgRetorno != "") {
        DialogPadrao("success", "Sucesso!", "success", msgRetorno, "btnOkDevolucaoSucesso", "OK", true);
    }
    $("#ObservacoesTextBox").keypress(function (e) {
        ValidaObservacoes();
    });
    var keyCodeAnt = 0;
    $("#ObservacoesTextBox").keydown(function (event) {
        // BackSpace
        if (event.keyCode == 8) {
            ValidaObservacoes();
        }
        else if (keyCodeAnt == 17 && event.keyCode == 86) {
            // CTRL + V
            return false;
        }
        keyCodeAnt = event.keyCode;
    });
    function ValidaObservacoes() {
        setTimeout(function () {
            if ($("#ObservacoesTextBox").valid()) {
                $("#ObservacoesDiv").removeClass("col-lg-10-2 has-error").addClass("col-lg-10-2");
            }
            else {
                $("#ObservacoesDiv").removeClass("col-lg-10-2").addClass("col-lg-10-2 has-error");
            }
        }, 50);
    }
    function ValidaDevolucao() {
        var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var data = table.rows().data();
        var msgErro = "";
        if (data.length == 0) {
            msgErro = "Para salvar o registro, selecione ao menos um item para devolução.</br></br>"
        }
        var msgAnexos = ValidaAnexos();
        if (msgErro != "" || msgAnexos) {
            DialogPadrao("warning", "Aviso!", "warning", msgErro + msgAnexos, "btnOkDevolucaoErro", "OK", true);
            return false;
        }
        return true;
    }
    function ValidaAnexos() {
        var arquivos = document.getElementById("AnexosTextBox").files;
        var msgErro = "O(s) seguinte(s) arquivos(s) excede(m) o tamanho máximo de 2 MB por anexo. Verifique!</br></br>";
        var nomeArquivo = "";
        for (var i = 0; i < arquivos.length; i++) {
            var tamanhoArq = arquivos[i].size / 1024 / 1024;
            // tamanho máximo de cada arquivo 2 MB
            if (tamanhoArq > 2) {
                nomeArquivo = nomeArquivo + arquivos[i].name + "<br/>";
            }
        }
        if (nomeArquivo != "") {
            return msgErro + nomeArquivo;
        }
        return "";
    }
    $("#CadastrarButton").click(function () {
        window.location = '@Url.Action("Cadastrar", "Solicitacoes")';
    });
    $("#CancelarButton").click(function () {
        var codCli = $('#CodClienteTextBox').val();
        if (codCli == "") {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
        }
        else {
            $('#CancelarRegistroDialog strong').html("Tem certeza que deseja cancelar a ocorrência de devolução Nº " + $('#NumRegistroTextBox').val() + " ?</br></br>Caso clique no botão Sim, a ocorrência será CANCELADA, impossibilitando edição futura.</br></br>Caso clique no botão Não, o ocorrência que está sendo alterado não mudará de status e a página será atualizada, para edição de outra ocorrência.");
            $('#CancelarRegistroDialog').modal('show');
        }
    });
    $("#BtnNaoCancelarRegistro").click(function () {
        window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
    });
    $("#BtnSimCancelarRegistro").click(function () {
        $('#CancelarRegistroDialog').modal('hide');
        CancelarRegistrosOcorrencia($('#NumRegistroTextBox').val(), $("#mensagemCancelamento").val());
    });
    function CancelarRegistrosOcorrencia(codigoRegistro, cancelamentoRegistro) {
        $('#progressBar').show();
        $.ajaxSetup({ cache: false });
            $.getJSON("@Url.Action("CancelarRegistrosOcorrencia")", { codigoRegistro: codigoRegistro, motivoCancelamento: cancelamentoRegistro }, function (data) {
                if (data.Logado || data.ErroExcecao) {
                    window.location.href = data.redirectUrl;
                    return;
                }
                else if (data.ExcluidoSucesso) {
                    DialogPadrao("success", "Sucesso!", "success", data.msgRetorno, "btnOkProtocoloExcluidoSucesso", "OK", true);
                } else {
                    DialogPadrao("warning", "Aviso", "warning", data.msgRetorno, "btnOkProtocoloExcluidoSucesso", "OK", true);
                }
                $('#progressBar').hide();
            });
        
    }
    $('#NumRegistroTextBox').mask("9?9999", { placeholder: "" });
    $('#QtdeDevolucaoItemNotaTextBox').mask("9?9999", { placeholder: "" });
    var keyCodeAnterior = 0;
    $(window).keydown(function (event) {
        // F5 ou CTRL + R
        if (event.keyCode == 116 || keyCodeAnterior == 17 && event.keyCode == 82) {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
            return false;
        }
        keyCodeAnterior = event.keyCode;
    });
    $("#SalvarAlteracaoBtn").click(function () {
        if (ValidaBtnSalvarItemNota()) {
            AlteraDadosLinhaItemNotaUpdate();
            SelecionaLinhaUpdate();
            //AtualizaValoresItemNota();
            $('#AlterarItemNotaDialog').modal('hide');
        }
    });
    
    function AlteraDadosLinhaItemNotaUpdate() {
        var contador = 0;
        var table = $('#TableItensNotasFiscaisSaida').dataTable();
        var valorQtdeDev = $("#QtdeDevolucaoItemNotaTextBox").val();
        var valorMotivo = $("#MotivoDevolucaoItemNotaDropDownList option:selected").text();
        var valorOrigem = $("#OrigemOcorrenciaItemNotaDropDownList option:selected").text();
        $(table.fnSettings().aoData).each(function () {
            var indice = contador;
            var dadosLinha = table.fnGetData(indice);
            if (dadosLinha[17] == idLinhaColunaInvisivel) {
                table.fnUpdate(valorQtdeDev, indice, 6, false, false);
                table.fnUpdate(valorMotivo, indice, 8, false, false);
                table.fnUpdate(valorOrigem, indice, 9, false, false);
            }
            contador = contador + 1;
        });
    }
    function SelecionaLinhaUpdate() {
        var totalRows = $("#TableItensNotasFiscaisSaida tr").length - 1;
        for (var row = 0; row <= totalRows; row++) {
            var idIndLinha = $("#TableItensNotasFiscaisSaida tr").eq(row).find("td").eq(17).text();
            if (idIndLinha == idLinhaColunaInvisivel) {
                var rowSel = $("#TableItensNotasFiscaisSaida tr").eq(row);
                var numeroNota = $("#NumNotaFiscalTextBox").val();
                var seqNota = $("#TableItensNotasFiscaisSaida tr").eq(row).find("td").eq(1).text();
                var idCheckBox = "checkBoxSelecionarItensDev" + numeroNota + "-" + seqNota;
                $("#" + idCheckBox).prop("checked", true);
                if (!$(rowSel).hasClass('selected')) {
                    $(rowSel).toggleClass('selected');
                }
                row = totalRows;
            }
        }
        AtualizaTotais();
    }
    var keyCodeAnterior = 0;
    $(window).keydown(function (event) {
        // F5 ou CTRL + R
        if (event.keyCode == 116 || keyCodeAnterior == 17 && event.keyCode == 82) {
            window.location = '@Url.Action("Pesquisar", "Solicitacoes")';
            return false;
        }
        keyCodeAnterior = event.keyCode;
    });
    $("#QtdeDevolucaoItemNotaTextBox").keypress(function (e) {
        ValidaQtdeDevItemNota();
    });
    $("#QtdeDevolucaoItemNotaTextBox").keydown(function (e) {
        // BackSpace
        if (e.keyCode == 8) {
            ValidaQtdeDevItemNota();
        }
    });
    function ValidaBtnSalvarItemNota() {
        $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
        var qtdeDev = $("#QtdeDevolucaoItemNotaTextBox").valid();
        var validaQtdeFatDev = ValidaQtdeFatDev();
        var motivo = $("#MotivoDevolucaoItemNotaDropDownList").valid();
        if (!motivo) {
            $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
        }
        else {
            $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
        }
        var origem = $("#OrigemOcorrenciaItemNotaDropDownList").valid();
        if (!origem) {
            $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
        }
        else {
            $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
        }
        if (qtdeDev && motivo && origem && validaQtdeFatDev) {
            $("#LabelErroAlterarItemNotaDialog").hide();
            return true;
        }
        else {
            $("#LabelErroAlterarItemNotaDialog").show();
            return false;
        }
    }
    function ValidaQtdeDevItemNota() {
        $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
        var qtdeDev = $("#QtdeDevolucaoItemNotaTextBox").valid();
        var classMotivo = document.getElementById('MotivoDevolucaoItemNotaDiv').className;
        var classOrigem = document.getElementById('OrigemOcorrenciaItemNotaDiv').className;
        var validaQtdeFatDev = ValidaQtdeFatDev();
        if (qtdeDev && classMotivo == "col-md-4" && classOrigem == "col-md-4" && validaQtdeFatDev) {
            $("#LabelErroAlterarItemNotaDialog").hide();
        }
        else {
            $("#LabelErroAlterarItemNotaDialog").show();
        }
    }
    function ValidaQtdeFatDev() {
        var valorQtdeDev = $("#QtdeDevolucaoItemNotaTextBox").val();
        if (valorQtdeDev == "") { valorQtdeDev == "0"; }
        if (parseInt(valorQtdeDev) > parseInt(qtdeFaturadaItemNota)) {
            $("#FieldErrorQtdeDevFat").removeClass("field-validation-valid").addClass("field-validation-error");
            return false;
        }
        else {
            $("#FieldErrorQtdeDevFat").removeClass("field-validation-error").addClass("field-validation-valid");
            return true;
        }
    }
    function ValidaMotivoItemNota() {
        $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
        var motivo = $("#MotivoDevolucaoItemNotaDropDownList").valid();
        if (motivo) {
            $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            var classQtdeDev = document.getElementById('QtdeDevolucaoItemNotaTextBox').className;
            var classOrigem = document.getElementById('OrigemOcorrenciaItemNotaDiv').className;
            var validaQtdeFatDev = ValidaQtdeFatDev();
            if ((classQtdeDev == "form-control input-sm valid" || classQtdeDev == "form-control input-sm") && classOrigem == "col-md-4" && validaQtdeFatDev) {
                $("#LabelErroAlterarItemNotaDialog").hide();
            }
        }
        else {
            $("#MotivoDevolucaoItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
            $("#LabelErroAlterarItemNotaDialog").show();
        }
        CarregaDropDownOrigemOcorrenciaItemNota();
    }
    function CarregaDropDownOrigemOcorrenciaItemNota() {
        var valorMotivo = $("#MotivoDevolucaoItemNotaDropDownList option:selected").val();
        if (valorMotivo != "0") {
            CarregaDropDownOrigemOcorrencia(valorMotivo, "OrigemOcorrenciaItemNotaDropDownList", "");
        }
        else {
            $("#OrigemOcorrenciaItemNotaDropDownList").empty();
            $("#OrigemOcorrenciaItemNotaDropDownList").append($('<option></option>').val("0").html("Selecione..."));
            document.getElementById('OrigemOcorrenciaItemNotaDropDownList').disabled = true;
        }
    }
    function ValidaOrigemItemNota() {
        $("#QtdeDevolucaoItemNotaTextBox").rules("add", { required: true });
        var origem = $("#OrigemOcorrenciaItemNotaDropDownList").valid();
        if (origem) {
            $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4 has-error").addClass("col-md-4");
            var classQtdeDev = document.getElementById('QtdeDevolucaoItemNotaTextBox').className;
            var classMotivo = document.getElementById('MotivoDevolucaoItemNotaDiv').className;
            var validaQtdeFatDev = ValidaQtdeFatDev();
            if ((classQtdeDev == "form-control input-sm valid" || classQtdeDev == "form-control input-sm") && classMotivo == "col-md-4" && validaQtdeFatDev) {
                $("#LabelErroAlterarItemNotaDialog").hide();
            }
        }
        else {
            $("#OrigemOcorrenciaItemNotaDiv").removeClass("col-md-4").addClass("col-md-4 has-error");
            $("#LabelErroAlterarItemNotaDialog").show();
        }
    }
    function CarregaDropDownOrigemOcorrencia(codigoMotivo, idDropDownMotivo, descricaoOrigem) {
        $.ajaxSetup({ cache: false });
        $("#" + idDropDownMotivo).empty();
        document.getElementById(idDropDownMotivo).disabled = false;
        $("#" + idDropDownMotivo).append($('<option></option>').val("0").html("Selecione..."));
        $.getJSON("@Url.Action("PesquisaOrigensPorMotivo")", { codigoMotivo: codigoMotivo }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.PesquisaSucesso) {
                for (var i = 0; i < data.ListaOrigensMotivo.length; i++) {
                    var codigo = data.ListaOrigensMotivo[i].CodigoOrigem.toString()
                    var descricao = data.ListaOrigensMotivo[i].DescricaoOrigem;
                    $("#" + idDropDownMotivo).append($('<option></option>').val(codigo).html(descricao));
                    if (descricaoOrigem == descricao) {
                        $('#OrigemOcorrenciaItemNotaDropDownList').val(codigo);
                    }
                }
            }
            else {
                document.getElementById(idDropDownMotivo).disabled = true;
            }
        });
    }
    
    function ListaItensDevolucao() {
        $('#progressBar').show();
        scrollTo(0, 0);
        var table = $('#TableItensNotasFiscaisDevolucao').DataTable();
        var data = table.rows().data();
        var listaItensDev = new Array();
        for (var i = 0; i < data.length; i++) {
            var Empresa = data[i][0] + "&";
            var Filial = data[i][1] + "&";
            var Serie = data[i][2] + "&";
            var NumeroNota = data[i][3] + "&";
            var SeqNota = data[i][4] + "&";
            var Tns = data[i][5] + "&";
            var Produto = data[i][6] + "&";
            var Derivacao = data[i][7] + "&";
            var DescPro = data[i][8].replace(",", "!") + "&";
            var QtdeFat = data[i][9] + "&";
            var QtdeDev = data[i][10] + "&";
            var OrigemOcor = data[i][11] + "&";
            var MotivoDev = data[i][12] + "&";
            var PrecoUnit = data[i][13].replace(",", "!") + "&";
            var PercDescUni = data[i][14].replace(",", "!") + "&";
            var PercIpi = data[i][15].replace(",", "!") + "&";
            var ValorIpi = data[i][16].replace(",", "!") + "&";
            var valorLiquido = data[i][17].replace(",", "!") + "&";
            var valorSt = data[i][18].replace(",", "!") + "&";
            var departamento = data[i][19] + "&";
            var DtUltAlt = data[i][20] + "&";
            var UsuarioUltAlt = data[i][21] + "&";
            listaItensDev[i] = new Array(Empresa, Filial, Serie, NumeroNota, SeqNota, Tns, Produto, Derivacao, DescPro, QtdeFat, QtdeDev, OrigemOcor, MotivoDev, PrecoUnit, PercDescUni, PercIpi, ValorIpi, valorLiquido, valorSt, departamento, DtUltAlt, UsuarioUltAlt);
        }
        $('#ListaItensDevolucaoHidden').val(listaItensDev);
        $('#NumRegistroHidden').val($('#NumRegistroTextBox').val());
        document.forms[0].submit();
        
    }
    $('#TableAnexos').dataTable({
        "ordering": false,
        "paging": false,
        "bSort": false,
        "bFilter": false,
        "info": false,
        "bLengthChange": false,
        "aoColumns": [
                    { "sClass": "left", "title": "Nome&nbspAnexo" + espaco.substring(0, 260) },
                    { "sClass": "center", "title": "Carregar", "bSortable": false, "bSearchable": false },
                    { "sClass": "center", "title": "Excluir", "bSortable": false, "bSearchable": false }],
        "scrollY": 145,
        "scrollX": true,
        "jQueryUI": false,
    });
    function PesquisarAnexos(codigoRegistro) {
        $("#gridTableAnexos").hide();
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("PesquisarAnexos")", { codigoRegistro: codigoRegistro }, function sucess(data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.PesquisaSucesso) {
                var arrayRow = new Array();
                $('#TableAnexos').dataTable().fnClearTable();
                for (var i = 0; i < data.ListaN0203ANXPesquisa.length; i++) {
                    var NumRegistro = data.ListaN0203ANXPesquisa[i].NumRegistro;
                    var NomeAnexo = data.ListaN0203ANXPesquisa[i].NomeAnexo;
                    var IdLinha = data.ListaN0203ANXPesquisa[i].IdLinha
                    var carregar = "<a style='color:#333333' href=\"#\" onClick=\"PesquisarItemAnexo('" + NumRegistro + "','" + IdLinha + "')\"><span class='glyphicon glyphicon-eye-open' title='Carregar Anexo'></span></a>";
                    var excluir = "<a style='color:#333333' href=\"#\" onClick=\"ExcluirItemAnexo('" + NumRegistro + "','" + IdLinha + "')\"><span class='glyphicon glyphicon-trash' title='Excluir Anexo'></span></a>";
                    arrayRow[i] = new Array(NomeAnexo, carregar, excluir);
                }
                $('#TableAnexos').dataTable().fnAddData(arrayRow);
                $('#TableAnexos').dataTable().fnPageChange('first');
                $("#gridTableAnexos").slideToggle('fast');
            }
        });
    }
    function PesquisarItemAnexo(codigoRegistro, idLinhaAnexo) {
        $('#progressBar').show();
        $.post("PesquisarItemAnexo", { codigoRegistro: codigoRegistro, idLinhaAnexo: idLinhaAnexo }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else {
                if (data.TipoAnexo.substring(0, 5) == "image" || data.TipoAnexo == "application/pdf" || data.TipoAnexo == "text/plain") {
                    window.open(data.Anexo);
                }
                else {
                    window.location = data.Anexo;
                }
                
            }
        }, "json");
        $('#progressBar').hide();
    }
    function ExcluirItemAnexo(codigoRegistro, idLinhaAnexo) {
        $('#progressBar').show();
        $.ajaxSetup({ cache: false });
        $.getJSON("@Url.Action("ExcluirItemAnexo")", { codigoRegistro: codigoRegistro, idLinhaAnexo: idLinhaAnexo }, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else if (data.ExcluidoSucesso) {
                PesquisarAnexos($("#NumRegistroTextBox").val());
                DialogPadrao("success", "Sucesso!", "success", data.msgRetorno, "btnOKAnexoExcluidoSucesso", "OK", true);
            }
            $('#progressBar').hide();
        });
    }
    var keyCodeAnt = 0;
    $("#ObservacoesTextBox").keydown(function (event) {
        // CTRL + V
        if (keyCodeAnterior == 17 && event.keyCode == 86) {
            return false;
        }
        keyCodeAnt = event.keyCode;
    });
    function RelatorioMotivosDevolucao() {
        $('#progressBar').show();
        $.post("RelatorioMotivosDevolucao", {}, function (data) {
            if (data.Logado || data.ErroExcecao) {
                window.location.href = data.redirectUrl;
                return;
            }
            else {
                window.open(data);
                $('#progressBar').hide();
            }
        }, "json");
    }
    $("#ValorBrutoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorStTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorLiquidoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorIpiTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    function HabilitaMaskaraMoeda() {
        $("#ValorBrutoTextBox").focus();
        $("#ValorIpiTextBox").focus();
        $("#ValorStTextBox").focus();
        $("#ValorLiquidoTextBox").focus();
        setTimeout(function () {
            scrollTo(0, 530);
        }, 10);
    }
    $('#liFase3').click(function () {
        HabilitaMaskaraMoedaDevolucao();
    });
    $("#ValorTotalNotasTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorBrutoDevolucaoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorStDevolucaoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorLiquidoDevolucaoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorIpiDevolucaoTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    $("#ValorReceberTextBox").maskMoney({
        showSymbol: true, symbol: "R$ ", thousands: '.', decimal: ',', allowZero: true
    });
    function HabilitaMaskaraMoedaDevolucao() {
        setTimeout(function () {
            $("#ValorTotalNotasTextBox").focus();
            $("#ValorBrutoDevolucaoTextBox").focus();
            $("#ValorStDevolucaoTextBox").focus();
            $("#ValorLiquidoDevolucaoTextBox").focus();
            $("#ValorIpiDevolucaoTextBox").focus();
            $("#ValorReceberTextBox").focus();
            $("#btnOkDialogItensExcSucesso").focus();
            scrollTo(0, 0);
        }, 250);
    }
    </script>
}
<h4>
    <ul class="breadcrumb" style="margin-bottom: 5px;">
        <li><a href="@Url.Content("~/PaginaInicial/Index")">Solicitações</a></li>
        <li class="active">@ViewBag.Title</li>
    </ul>
</h4>
<div class="progress progress-striped active" style="display: none;" id="progressBar">
    <div class="progress-bar" style="width: 100%">
    </div>
</div>
<div class="modal" id="DialogPadrao" data-backdrop="static"></div>
<div class="modal fade bs-example-modal-lg" id="RegistroDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharRegistroDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Registros</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTableRegistro" style="display: none;">
                        <table id="TableRegistro" class="display compact" cellspacing="0" width="99.9%"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade bs-example-modal-lg" id="TransporteDialog" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" id="BtnFecharClienteDialog" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title">Pesquisar Transportadora</h3>
                </div>
                <div class="panel-body">
                    <div id="gridTableTransporte" style="display: none;">
                        <table id="TableTransporte" class="display compact" cellspacing="0"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="CancelarRegistroDialog" style="display: none;" data-backdrop="static">
    <div class="modal-dialog">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h3 class="panel-title">Cancelar Ocorrência de Devolução</h3>
            </div>
            
            <div class="panel-body">
                <strong></strong>
                <div class="row">
                    <br />
                    <div>
                        <label  for="msg">Motivo de Cancelamento:</label>
                        <br/>
                        <textarea rows="6" cols="80" id="mensagemCancelamento" name="comment" required></textarea>
                    </div>
                    <div style="text-align:center">
                        <button type="button" id="BtnNaoCancelarRegistro" class="btn btn-default" data-dismiss="modal">Não</button>
                        <button type="button" id="BtnSimCancelarRegistro" class="btn btn-primary" style="margin-top:0px">Sim</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("Pesquisar", "Solicitacoes", FormMethod.Post, new { @class = "form-horizontal", id = "PesquisarRegistroOcorrenciasForm", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary(true)
    <div class="modal" id="AlterarItemNotaDialog" data-backdrop="static" style="display: none;">
        <div class="modal-dialog">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h3 class="panel-title"></h3>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-dismissable alert-danger" id="LabelErroAlterarItemNotaDialog">
                                @Html.ValidationMessageFor(m => m.QtdeDevolucaoItemNota, string.Empty, new { id = "FieldErrorQtdeDev" })
                                <span id="FieldErrorQtdeDevFat" class="field-validation-valid"><span class="">A Quantidade de Devolução não pode ser maior que a quantidade faturada.<br></span></span>
                                @Html.ValidationMessageFor(m => m.MotivoDevolucaoItemNota, string.Empty, new { id = "FieldErrorMotivoDevolucaoItemNota" })
                                @Html.ValidationMessageFor(m => m.OrigemOcorrenciaItemNota, string.Empty, new { id = "FieldErrorOrigemOcorrenciaItemNota" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        @Html.LabelFor(m => m.QtdeDevolucaoItemNota, new { @class = "col-md-4 control-label" })
                        @Html.LabelFor(m => m.MotivoDevolucaoItemNota, new { @class = "col-md-4 control-label" })
                        @Html.LabelFor(m => m.OrigemOcorrenciaItemNota, new { @class = "col-md-4 control-label" })
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.QtdeDevolucaoItemNota, new { @class = "form-control input-sm", @id = "QtdeDevolucaoItemNotaTextBox" })
                        </div>
                        <div class="col-md-4" id="MotivoDevolucaoItemNotaDiv">
                            @Html.DropDownListFor(m => m.MotivoDevolucaoItemNota, new SelectList(Model.ListaMotivoDevolucao.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "MotivoDevolucaoItemNotaDropDownList", @onchange = "ValidaMotivoItemNota();" })
                        </div>
                        <div class="col-md-4" id="OrigemOcorrenciaItemNotaDiv">
                            @Html.DropDownListFor(m => m.OrigemOcorrenciaItemNota, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao"), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaItemNotaDropDownList", @onchange = "ValidaOrigemItemNota();" })
                        </div>
                    </div>
                    <p></p>
                    <div class="row">
                        <div style="text-align:center">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                            <button type="button" id="SalvarAlteracaoBtn" class="btn btn-primary" style="margin-top:0px">Salvar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @Html.LabelFor(m => m.NumRegistro, new { @class = "col-md-2 control-label" })
        <div class="col-md-3">
            <div class="input-group">
                @Html.TextBoxFor(m => m.NumRegistro, new { @class = "form-control input-sm", @id = "NumRegistroTextBox" })
                <span class="input-group-addon" style="padding: 3px 10px">
                    <a style='color:#333333' href="#" id="PesquisarRegistroBtn"><span class="glyphicon glyphicon-search" title="Pesquisar registro"></span></a>
                </span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2 control-label">
        </div>
        <div class="col-md-4">
            @Html.ValidationMessageFor(m => m.NumRegistro)
        </div>
    </div>
    <ul class="nav nav-tabs" style="margin-bottom: 15px;">
        <li id="liFase1" class="active"><a id="HrefFase1" href="#fase1" data-toggle="tab">Fase 1</a></li>
        <li id="liFase2" class="disabled"><a id="HrefFase2">Fase 2</a></li>
        <li id="liFase3" class="disabled"><a id="HrefFase3">Fase 3</a></li>
        <li id="liFase4" class="disabled"><a id="HrefFase4">Fase 4</a></li>
        <li>
            <button type="button" id="CancelarButton" style="margin-right:0px; margin-top:6px" class="btn btn-primary btn-sm">Cancelar</button>
        </li>
        <li><button type="button" id="CadastrarButton" style="margin-left:2px; margin-top:6px" class="btn btn-primary btn-sm">Cadastrar</button></li>
    </ul>
    <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="fase1">
            <div class="panel panel-default">
                <p></p>
                <div class="form-group">
                    @Html.LabelFor(m => m.TipoAtendimento, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(m => m.TipoAtendimento, new SelectList(Model.ListaTipoAtendimento.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.TipoAtendimento), new { @class = "form-control input-sm", @id = "TipoAtendimentoDropDownList", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OrigemOcorrencia, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.DropDownListFor(m => m.OrigemOcorrencia, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.OrigemOcorrencia), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaFase1DropDownList", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodCliente, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.CodCliente, new { @class = "form-control input-sm", @id = "CodClienteTextBox", @ViewBag.Disabled })
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeCliente, new { @class = "form-control input-sm", @id = "NomeClienteTextBox", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodMotorista, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.CodMotorista, new { @class = "form-control input-sm", @id = "CodMotoristaTextBox", @ViewBag.Disabled })
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeMotorista, new { @class = "form-control input-sm", @id = "NomeMotoristaTextBox", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.CodPlaca, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.CodPlaca, new { @class = "form-control input-sm", @id = "CodPlacaTextBox", @ViewBag.Disabled })
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.DescricaoPlaca, new { @class = "form-control input-sm", @id = "DescricaoPlacaTextBox", @ViewBag.Disabled })
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <legend>&nbsp;&nbsp;Dados Gerais</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.DataHoraGeracao, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.DataHoraGeracao, new { @class = "form-control input-sm", @id = "DataHoraGeracaoTextBox", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.UsuarioGeracao, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.UsuarioGeracao, new { @class = "form-control input-sm", @id = "UsuarioGeracaoTextBox", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SituacaoRegistro, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.SituacaoRegistro, new { @class = "form-control input-sm", @id = "SituacaoRegistroTextBox", @ViewBag.Disabled })
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <legend>&nbsp;&nbsp;Dados da Última Alteração</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.UltimaAlteracao, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.UltimaAlteracao, new { @class = "form-control input-sm", @id = "UltimaAlteracaoTextBox", @ViewBag.Disabled })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.UsuarioUltimaAlteracao, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.UsuarioGeracao, new { @class = "form-control input-sm", @id = "UsuarioUltimaAlteracaoTextBox", @ViewBag.Disabled })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase2">
            <div class="panel panel-default" id="DivPanelFase2" style="display: none;">
                <legend>&nbsp;&nbsp;Dados Gerais de Notas Fiscais de Saída</legend>
                <div id="gridTableNotasFiscaisSaida" style="display: none;">
                    <table id="TableNotasFiscaisSaida" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th class="disabled" style="text-align:center">Carregar</th>
                                <th>Empresa</th>
                                <th>Filial</th>
                                <th>Série</th>
                                <th>Nº&nbsp;NF</th>
                                <th>Emissão</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Situação</th>
                                <th>Tipo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Cod.&nbsp;Cliente</th>
                                <th>Nome&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>TNS</th>
                                <th>Descrição&nbsp;TNS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Cod.&nbsp;Transportadora</th>
                                <th>Ind.&nbsp;Situação&nbsp;Conferência</th>
                                <th>Dias&nbsp;Faturamento</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="panel panel-default" style="display: none;" id="DivItensNotasFiscaisSaida">
                <legend>&nbsp;&nbsp;Itens da Nota Fiscal de Saída Selecionada</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.Empresa, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Empresa, new { @class = "form-control input-sm", @ViewBag.Disabled, @id = "EmpresaTextBox" })
                    </div>
                    @Html.LabelFor(m => m.Filial, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Filial, new { @class = "form-control input-sm", @ViewBag.Disabled, @id = "FilialTextBox" })
                    </div>
                    <div class="col-lg-6">
                        @Html.LabelFor(m => m.MotivoDevolucao, new { @class = "col-md-6 control-label" })
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-addon" style="padding: 3px 6px">
                                    <a style='color:#333333' href="#" onclick="RelatorioMotivosDevolucao()"><span class="glyphicon glyphicon-question-sign" title="Ajuda"></span></a>
                                </span>
                                @Html.DropDownListFor(m => m.MotivoDevolucao, new SelectList(Model.ListaMotivoDevolucao.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.MotivoDevolucao), new { @class = "form-control input-sm", @id = "MotivoDevolucaoFase2DropDownList", @onchange = "MudarMotivoDevolucao()" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Serie, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.Serie, new { @class = "form-control input-sm", @ViewBag.Disabled, @id = "SerieTextBox" })
                    </div>
                    @Html.LabelFor(m => m.NumNotaFiscal, new { @class = "col-md-2 control-label" })
                    <div class="col-md-1">
                        @Html.TextBoxFor(m => m.NumNotaFiscal, new { @class = "form-control input-sm", @ViewBag.Disabled, @id = "NumNotaFiscalTextBox" })
                    </div>
                    <div class="col-lg-6">
                        @Html.LabelFor(m => m.OrigemOcorrencia, new { @class = "col-md-6 control-label" })
                        <div class="col-md-6">
                            @Html.DropDownListFor(m => m.OrigemOcorrencia, new SelectList(Model.ListaOrigemOcorrencia.Select(x => new { Codigo = x.Codigo, Descricao = x.Descricao }), "Codigo", "Descricao", Model.OrigemOcorrencia), new { @class = "form-control input-sm", @id = "OrigemOcorrenciaFase2DropDownList", @onchange = "MudarOrigemOcorrencia()" })
                        </div>
                    </div>
                </div>
                <div id="gridTableItensNotasFiscaisSaida">
                    <table id="TableItensNotasFiscaisSaida" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th class="disabled" style="text-align:center">Sel.</th>
                                <th>Seq.</th>
                                <th>TNS</th>
                                <th>Código&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Descrição&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Qtde&nbsp;Faturada</th>
                                <th>Qtde&nbsp;Devolução</th>
                                <th>Preço&nbsp;Unitário</th>
                                <th>Motivo&nbsp;de&nbsp;Devolução&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Origem&nbsp;Ocorrência</th>
                                <th>%&nbsp;Desc.UN</th>
                                <th>%&nbsp;IPI&nbsp;&nbsp;</th>
                                <th>Valor&nbsp;IPI</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Valor&nbsp;ST</th>
                                <th>Dep.</th>
                                <th>Frete</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(m => m.QtdeTotal, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.QtdeTotal, new { @class = "form-control input-sm", @readOnly = true, @id = "QtdeTotalTextBox" })
                    </div>
                    @Html.LabelFor(m => m.ValorIpi, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorIpi, new { @class = "form-control input-sm", @readOnly = true, @id = "ValorIpiTextBox" })
                    </div>
                    <div class="col-lg-4">
                        <label class="col-md-6 control-label">Itens Selecionados ? </label>
                        <div class="col-md-5">
                            <button class="btn btn-default btn-sm" type="button" id="AdicionarItenButton">Adicionar Itens</button>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorBruto, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorBruto, new { @class = "form-control input-sm", @readOnly = true, @id = "ValorBrutoTextBox" })
                    </div>
                    @Html.LabelFor(m => m.ValorSt, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorSt, new { @class = "form-control input-sm", @id = "ValorStTextBox", @readOnly = true })
                    </div>
                    @Html.LabelFor(m => m.ValorLiquido, new { @class = "col-md-2 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorLiquido, new { @class = "form-control input-sm", @readOnly = true, @id = "ValorLiquidoTextBox" })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase3">
            <div class="panel panel-default" id="DivPanelFase3" style="display: none;">
                <legend>&nbsp;&nbsp;Itens de Notas Fiscais Selecionadas para Devolução</legend>
                <div id="gridTableItensNotasFiscaisDevolucao">
                    <table id="TableItensNotasFiscaisDevolucao" class="display compact" cellspacing="0" width="99.9%">
                        <thead>
                            <tr>
                                <th>Emp.</th>
                                <th>Fil.</th>
                                <th>Série</th>
                                <th>Nº&nbsp;NF</th>
                                <th>Seq</th>
                                <th>TNS</th>
                                <th>Prod.</th>
                                <th>Der.</th>
                                <th>Descrição&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Qtde.&nbsp;Fat.</th>
                                <th>Qtde.&nbsp;Dev.</th>
                                <th>Origem&nbsp;Ocorrência</th>
                                <th>Motivo&nbsp;de&nbsp;Devolução&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                <th>Preço&nbsp;Unitário</th>
                                <th>%&nbsp;Desc.UN</th>
                                <th>%&nbsp;IPI</th>
                                <th>Valor&nbsp;IPI</th>
                                <th>Valor&nbsp;Líquido</th>
                                <th>Valor&nbsp;ST</th>
                                <th>Dep.</th>
                                <th>Data&nbsp;Última&nbsp;Alteração</th>
                                <th>Usuário&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(m => m.QtdeTotalDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.QtdeTotalDevolucao, new { @class = "form-control input-sm", @id = "QtdeTotalDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @*<div class="col-md-2">
                        </div>*@
                    @Html.LabelFor(m => m.ValorTotalNotas, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorTotalNotas, new { @class = "form-control input-sm", @id = "ValorTotalNotasTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorBrutoDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorBrutoDevolucao, new { @class = "form-control input-sm", @id = "ValorBrutoDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorStDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorStDevolucao, new { @class = "form-control input-sm", @id = "ValorStDevolucaoTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ValorIpiDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorIpiDevolucao, new { @class = "form-control input-sm", @id = "ValorIpiDevolucaoTextBox", @readOnly = true })
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorLiquidoDevolucao, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorLiquidoDevolucao, new { @class = "form-control input-sm", @id = "ValorLiquidoDevolucaoTextBox", @readOnly = true })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label"></label>
                    <div class="col-md-2">
                    </div>
                    <label class="col-md-1 control-label"></label>
                    @Html.LabelFor(m => m.ValorReceber, new { @class = "col-md-3 control-label" })
                    <div class="col-md-2">
                        @Html.TextBoxFor(m => m.ValorReceber, new { @class = "form-control input-sm", @id = "ValorReceberTextBox", @readOnly = true })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fase4">
            <div class="panel panel-default" id="DivPanelFase4" style="display: block;">
                <legend>&nbsp;&nbsp;Digite as observações abaixo</legend>

                <div id="ConferenciaItem" class="form-group">
                    <p></p>
                    @Html.LabelFor(m => m.CodTra, new { @class = "col-md-1 control-label" })
                    <div class="col-md-1">
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CodTra, new { @class = "form-control input-smgroup", @id = "CodigoClienteConferenciaItem" })
                            <span class="input-group-addon" style="padding: 3px 10px">
                                <a style='color:#333333' href="#" id="PesquisarClienteButtonItens"><span class="glyphicon glyphicon-search" title="Pesquisar Transportadora"></span></a>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        @Html.TextBoxFor(m => m.NomeTra, new { @class = "form-control input-smgroup", @id = "NomeclienteConferenciaItem", @readonly = "true" })
                        @Html.ValidationMessageFor(m => m.CodTra)
                        @Html.ValidationMessageFor(m => m.NomeTra)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Observacoes, new { @class = "col-md-1 control-label" })
                    <div class="col-lg-10-2" id="ObservacoesDiv">
                        @Html.TextAreaFor(m => m.Observacoes, new { @class = "form-control", @id = "ObservacoesTextBox", @style = "max-width:100%", @rows = "6", onKeyPress = "return ( this.value.length < 400 );" })
                        @Html.ValidationMessageFor(m => m.Observacoes)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AnexoArquivo, new { @class = "col-md-1 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(m => m.AnexoArquivo, new { type = "file", @class = "form-control", @multiple = true, @id = "AnexosTextBox" })
                    </div>
                </div>
                <div class="form-group" id="gridTableAnexos">
                    @Html.LabelFor(m => m.Anexos, new { @class = "col-md-1 control-label" })
                    <div class="col-md-5">
                        <table id="TableAnexos" class="display compact" cellspacing="0" width="99.9%"></table>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-1 control-label">
                    </div>
                    <span class="input-group-btn">
                        <div class="col-lg-1">
                            <button type="button" id="RascunhoButton" class="btn btn-primary btn-sm">Rascunho</button>
                        </div>
                        <div class="col-lg-1">
                            <button type="button" id="FinalizarButton" class="btn btn-primary btn-sm">Finalizar</button>
                        </div>
                    </span>
                </div>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.ListaItensDevolucao, new { @id = "ListaItensDevolucaoHidden" })
    @Html.HiddenFor(m => m.Acao, new { @id = "AcaoHidden" })
    @Html.HiddenFor(m => m.NumRegistro, new { @id = "NumRegistroHidden" })
    @Html.HiddenFor(m => m.CodCliente, new { @id = "CodClienteHidden" })
}